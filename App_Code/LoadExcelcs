using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;

using System.Text;
using System.IO;
using System.Data.OleDb;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

/// <summary>
/// Provides Methods and Functions to Generate a Excel File
/// </summary>
/// <remarks>Allis Montenegro,dempsi@gmail.com</remarks>
public class Load_Excel
{

	private string _sError;
	private DataTable _dtColumnas;
	//To manage Excel Columns
	private string[] ExcelColums = {
		"A",
		"B",
		"C",
		"D",
		"E",
		"F",
		"G",
		"H",
		"I",
		"J",
		"K",
		"L",
		"M",
		"N",
		"O",
		"P",
		"Q",
		"R",
		"S",
		"T",
		"U",
		"V",
		"W",
		"X",
		"Y",
		"Z"

	};
	/// <summary>
	/// To get if a file extension is aproved. It reads from web.config key call AllowedFileExtensions
	/// </summary>
	/// <param name="FileExtension"> A file extension</param>
	/// <returns>True if a file extension is aproved and false if not</returns>
	/// <remarks></remarks>
	public bool FileExtensionIsApproved(string FileExtension)
	{
		bool functionReturnValue = false;
		functionReturnValue = false;
		string[] AllowedFileExtensions = System.Configuration.ConfigurationManager.AppSettings("AllowedFileExtensions").Split(",");
		for (int i = 0; i <= AllowedFileExtensions.Length - 1; i++) {
			if (FileExtension == AllowedFileExtensions[i]) {
				functionReturnValue = true;
				break; // TODO: might not be correct. Was : Exit For
			}
		}
		return functionReturnValue;
	}

	/// <summary>
	/// To Read an Excel File and Get a DataTable with its values
	/// </summary>
	/// <param name="file">Excel File as Stream</param>
	/// <param name="SheetName">Excel Sheet Name</param>
	/// <param name="Columns">Number of Columns contained in the Excel</param>
	/// <returns>A DataTable with Excel Values</returns>
	/// <remarks></remarks>
	public DataTable GetExcelAsDataTable(Stream file, string SheetName, int Columns)
	{
		DataTable Dt = new DataTable();
		using (myWorkbook == SpreadsheetDocument.Open(file, false)) {
			dynamic workbookpart = myWorkbook.WorkbookPart;
			WorksheetPart worksheetPart = default(WorksheetPart);

			if (!string.IsNullOrEmpty(SheetName)) {
				Sheet ss = workbookpart.Workbook.Descendants<Sheet>().Where(s => s.Name == SheetName).SingleOrDefault();
				worksheetPart = (WorksheetPart)workbookpart.GetPartById(ss.Id);
			} else {
				worksheetPart = workbookpart.WorksheetParts.FirstOrDefault();
			}

			SharedStringTablePart stringTablePart = workbookpart.SharedStringTablePart;
			if (worksheetPart != null) {
				Row lastRow = worksheetPart.Worksheet.Descendants<Row>().LastOrDefault();
				Row firstRow = worksheetPart.Worksheet.Descendants<Row>().FirstOrDefault;

				int x = 0;
				int y = 0;
				int z = 0;

				string[] rowValues = new string[Columns];
				UInt32 i = default(UInt32);


				for (i = 0; i <= Columns - 1; i++) {
					Dt.Columns.Add(i);
				}

				if (lastRow != null) {
					for (i = 1; i <= lastRow.RowIndex; i++) {
						DataRow dr = Dt.NewRow();
						dynamic row = worksheetPart.Worksheet.Descendants<Row>.Where(r => i == r.RowIndex.Value).FirstOrDefault;

						if (row != null) {
							for (j = 0; j <= Columns - 1; j++) {
								string scolumna = "";

								if (j > ExcelColums.Count - 1) {
									if (y <= ExcelColums.Count - 1) {
										scolumna = ExcelColums[x].ToString() + ExcelColums[y];
										y = +1;
									} else {
										if (y > ExcelColums.Count - 1) {
											if (x > ExcelColums.Count - 1) {
												//si hay mas de 676 columnas en el excel
												//more than 676 columns in the Excel File
												return null;
											}
											x = +1;
											y = 0;
										}
									}
								} else {
									scolumna = ExcelColums[j];
								}
								string value = GetCellValue(row, scolumna, i, stringTablePart.SharedStringTable);
								dr[j] = value;
							}
							x = 0;
							y = 0;
							Dt.Rows.Add(dr);
						}
					}
				}
			}
		}

		return Dt;
	}
	/// <summary>
	/// To Get a Value From Cell
	/// </summary>
	/// <param name="row">Is The Excel Row</param>
	/// <param name="colName">Is The Column Identifier</param>
	/// <param name="rowIndex">Is the row index</param>
	/// <param name="sharedStringTable">Is the table part of the workbook</param>
	/// <returns>Empty string when the cells does not exist and a value if the cell exist</returns>
	/// <remarks></remarks>
	private string GetCellValue(Row row, string colName, uint rowIndex, SharedStringTable sharedStringTable)
	{
		// Iterate through the cells within the range and add their values to the sum.
		dynamic textValues = (from c in row.Descendants<Cell>()where c.CellValue != null && c.CellReference.Value.Equals(colName + rowIndex.ToString(), StringComparison.OrdinalIgnoreCase)(c.DataType != null && c.DataType.HasValue && c.DataType.Value == CellValues.SharedString ? sharedStringTable.ChildElements(int.Parse(c.CellValue.InnerText)).InnerText : c.CellValue.InnerText));
		if (textValues.Count == 0) {
			return "";
		} else {
			return textValues.First;
		}
	}

	/// <summary> Gets a Error Message
	/// </summary>
	/// <value></value>
	/// <returns></returns>
	/// <remarks></remarks>
	public string ErrorMessage {
		get { return _sError; }
	}

	/// <summary>
	/// To Generate Excel File
	/// </summary>
	/// <returns>a Byte Array with Excel File</returns>
	/// <remarks></remarks>
	public byte[] CreateExcel()
	{

		dynamic memoryStream = new MemoryStream();
		using (excel == SpreadsheetDocument.Create(memoryStream, SpreadsheetDocumentType.Workbook)) {

			dynamic workbook = excel.AddWorkbookPart;

			dynamic stringTable = workbook.AddNewPart<SharedStringTablePart>();
			dynamic worksheet = workbook.AddNewPart<WorksheetPart>();
			dynamic sheetId = workbook.GetIdOfPart(worksheet);

			StringBuilder XMLString = new StringBuilder();

			//create the string table
			dynamic xmlStringTable = new XElement("sst");
			WriteXmlToPart(stringTable, xmlStringTable);

			//create the workbook
			dynamic xmlWorkbook = new XElement("workbook", new XElement("sheets", new XElement("sheet", new XAttribute("name", "Hoja1"), new XAttribute("sheetId", "1"), new XAttribute("r:id", sheetId))));
			WriteXmlToPart(workbook, xmlWorkbook);

			//create the spreadsheet

			XElement xmlWorkSheet = new XElement("worksheet", new XElement("sheetFormatPr", new XAttribute("defaultRowHeight", "15")), new XElement("cols", new XElement("col", new XAttribute("min", "1"), new XAttribute("max", "16384"), new XAttribute("width", "20"))));


			XElement row = new XElement("row");
			XElement c = new XElement("c");
			XElement _is = new XElement("is");
			XElement v = default(XElement);

			XElement sheedata = new XElement("sheetData");

			for (i = 0; i <= _dtColumnas.Rows.Count - 1; i++) {
				row = new XElement("row");
				for (j = 0; j <= _dtColumnas.Columns.Count - 1; j++) {
					v = new XElement("t", (_dtColumnas.Rows[i][j] != null ? _dtColumnas.Rows[i][j] : null));
					_is = new XElement("is");
					_is.Add(v);
					c = new XElement("c", new XAttribute("t", "inlineStr"));
					c.Add(_is);
					row.Add(c);
					c = null;
					v = null;
					_is = null;
				}
				sheedata.Add(row);
				v = null;
				_is = null;
				c = null;
				row = null;
			}

			xmlWorkSheet.Add(sheedata);
			WriteXmlToPart(worksheet, xmlWorkSheet);
		}

		return memoryStream.ToArray();

	}
	/// <summary>
	/// Write a stream in memory with Excel Parts
	/// </summary>
	/// <param name="part">Excel Part</param>
	/// <param name="x">XElment fro Excel Part</param>
	/// <remarks></remarks>
	public void WriteXmlToPart(OpenXmlPart part, XElement x)
	{
		System.IO.StreamWriter fs = new System.IO.StreamWriter(part.GetStream, new System.Text.UTF8Encoding());

		System.Xml.XmlTextWriter xmlWriter = new System.Xml.XmlTextWriter(part.GetStream, new UTF8Encoding());
		xmlWriter.Formatting = System.Xml.Formatting.Indented;
		UTF8Encoding enc = new UTF8Encoding();

		xmlWriter.WriteStartDocument();
		x.WriteTo(xmlWriter);
		xmlWriter.WriteEndDocument();
		xmlWriter.Flush();
		xmlWriter.Close();
	}

	/// <summary>
	/// To set a DataTable for Generates a Excel File
	/// </summary>
	/// <value>DataTable</value>
	/// <remarks></remarks>
	public DataTable Columnas {
		set { _dtColumnas = value; }
	}

	/// <summary>
	/// To binary read the excel file
	/// </summary>
	/// <param name="file">To store file stream, example:FileUpload1.PostedFile.InputStream()</param>
	/// <returns>Returns a Byte array</returns>
	/// <remarks></remarks>
	public byte[] ExcelFile(System.IO.Stream file)
	{
		byte[] MyData = new byte[file.Length + 1];
		file.Read(MyData, 0, file.Length);
		file.Close();
		return MyData;
	}



}
