using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using System.Collections;
using System.IO;
using System.Data;
using System.Text.RegularExpressions;
using DataAccess;
using System.Web.UI;
using System.Data.SqlClient;
using System.Xml;
using System.Net;
using System.Configuration;
using Chilkat;



namespace BussinessLogic
{
    public class SapIntegration
    {
        
        Chilkat.SFtp sftp = new Chilkat.SFtp();
        Chilkat.Ftp2 ftp = new Chilkat.Ftp2();
        bool success;
        object objSum;
        string strFileName;
        
        private string strAddress1, strAddress2, strPinCode, strMobileNumber, strBTMSapDetailXML, strPhoneNumber, strTinNumber, strError, strEmail, strMODSapDetailXML;
        string str = AppDomain.CurrentDomain.BaseDirectory.ToString();
        //DirectoryInfo drSourceInfo = new DirectoryInfo(HttpContext.Current.Request.MapPath(PageBase.SapDirectoryPath));
        //DirectoryInfo drTargetInfoFailure = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Failure");
        //DirectoryInfo drTargetInfoSuccess = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Success");
        DataTable dtResult;
        Int64 result;
        SqlParameter[] SqlParam;
        Int32 IntResultCount = 0,status;
        DataSet dsResult, dsErrorXML, dsSap;
        DataSet dsSapInfo = new DataSet();
        /*Onida*/
        DataSet dsList;
        static string ServiceDocNoSap = string.Empty;
        SapService objsapServiceOnida;
        DataSet dsSapInfoOnida;
        //@FromErrorOrNot=0 successfully inserted  
        //@FromErrorOrNot=1 Exception occured  
        //@FromErrorOrNot=2 Selection   
        /*Onida*/

        byte isSuccess = 1;
        int ErrorCounter = 1;
        Int16 UploadCheck = 0, UploadCheck1;
        SapService objSapService = new SapService();
        SapService objSapBTM = new SapService();
        int counter = 1;
        Boolean blnStatus;
        string strMailTo = ConfigurationManager.AppSettings["MailToSap"].ToString();
        string strMailToAtException = ConfigurationManager.AppSettings["MailToAtException"].ToString();
        string strConnectionString = ConfigurationManager.ConnectionStrings["SapConString"].ToString();
        String strDateTime, strUploadedFileName, handle, remoteFilePath;
        Hashtable hslist = new Hashtable();
        UploadFile UploadFile = new UploadFile();

        public Boolean InsertDataBTM(DataSet dsBTMData, string filename)
        {

            DataTable dtBTMData = dsBTMData.Tables[0];
            for (int i = 0; i < dsBTMData.Tables[0].Columns.Count; i++)
            {
                dsBTMData.Tables[0].Columns[i].ColumnName = (dsBTMData.Tables[0].Columns[i].ColumnName).Replace(" ", "");
                dsBTMData.Tables[0].Columns[i].ColumnName = (dsBTMData.Tables[0].Columns[i].ColumnName).Replace("(", "");
                dsBTMData.Tables[0].Columns[i].ColumnName = (dsBTMData.Tables[0].Columns[i].ColumnName).Replace(")", "");
                dsBTMData.Tables[0].Columns[i].ColumnName = (dsBTMData.Tables[0].Columns[i].ColumnName).Replace(".", "");
            }
            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";


            if (dsBTMData.Tables[0].Columns.Contains("Error") == false)
                dsBTMData.Tables[0].Columns.Add(dcError);
            counter = 1;
            for (int i = 0; i <= dtBTMData.Rows.Count - 1; i++)
            {
                if (dtBTMData != null && dtBTMData.Rows.Count > 0)
                {
                    //Same Invoice Number has different TD Code
                    if (dtBTMData.Rows[i]["RPLANTCODE"] != DBNull.Value || dtBTMData.Rows[i]["SPLANTCODE"] != DBNull.Value)
                    {
                        string strWhere = "SPLANTCODE<>'" + dtBTMData.Rows[i]["SPLANTCODE"].ToString().Trim() + "' and RPLANTCODE<>'" + dtBTMData.Rows[i]["RPLANTCODE"].ToString().Trim() + "' and InvoiceNo ='" + dtBTMData.Rows[i]["InvoiceNo"].ToString().Trim() + "'";
                        DataRow[] dr = dtBTMData.Select(strWhere);
                        if (dr.Length > 0)
                        {
                            counter = counter + 1;
                            if (dtBTMData.Rows[i]["Error"] == DBNull.Value && dtBTMData.Rows[i]["Error"] == string.Empty)
                            {
                                dtBTMData.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                            }
                            else
                                dtBTMData.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                        }
                        string strWhere4 = "SPLANTCODE='" + dtBTMData.Rows[i]["SPLANTCODE"].ToString().Trim() + "' and RPLANTCODE<>'" + dtBTMData.Rows[i]["RPLANTCODE"].ToString().Trim() + "' and InvoiceNo ='" + dtBTMData.Rows[i]["InvoiceNo"].ToString().Trim() + "'";
                        DataRow[] dr1 = dtBTMData.Select(strWhere4);
                        if (dr1.Length > 0)
                        {
                            counter = counter + 1;
                            if (dtBTMData.Rows[i]["Error"] == DBNull.Value && dtBTMData.Rows[i]["Error"] == string.Empty)
                            {
                                dtBTMData.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                            }
                            else
                                dtBTMData.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                        }
                        string strWhere3 = "SPLANTCODE<>'" + dtBTMData.Rows[i]["SPLANTCODE"].ToString().Trim() + "' and RPLANTCODE='" + dtBTMData.Rows[i]["RPLANTCODE"].ToString().Trim() + "' and InvoiceNo ='" + dtBTMData.Rows[i]["InvoiceNo"].ToString().Trim() + "'";
                        DataRow[] dr2 = dtBTMData.Select(strWhere3);
                        if (dr2.Length > 0)
                        {
                            counter += counter;
                            if (dtBTMData.Rows[i]["Error"] == DBNull.Value && dtBTMData.Rows[i]["Error"] == string.Empty)
                            {
                                dtBTMData.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                            }
                            else
                                dtBTMData.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                        }

                        strDateTime = Convert.ToString(dtBTMData.Rows[i]["InvoicingDate"]).Substring(3, 2);
                        strDateTime = strDateTime + "-" + Convert.ToString(dtBTMData.Rows[i]["InvoicingDate"]).Substring(0, 2);
                        strDateTime = strDateTime + "-" + Convert.ToString(dtBTMData.Rows[i]["InvoicingDate"]).Substring(6, 4);
                        DateTime dtInvoiceDate = Convert.ToDateTime(strDateTime);

                        TimeSpan ts = dtInvoiceDate.Subtract(System.DateTime.Now.Date);
                        if (ts.Days > 0)
                        {
                            counter = counter + 1;
                            if (dtBTMData.Rows[i]["Error"] != DBNull.Value)
                                dtBTMData.Rows[i]["Error"] = " Invoice date should not be greater than current date!<br/>";
                            else
                                dtBTMData.Rows[i]["Error"] += ";Invoice date should not be greater than current date!<br/>";
                        }
                    }
                    //Multiple invoice date with same invoiceNumber
                    string strWhere1 = "InvoiceNo='" + dtBTMData.Rows[i]["InvoiceNo"].ToString().Trim() + "'and InvoicingDate <>'" + dtBTMData.Rows[i]["InvoicingDate"].ToString().Trim() + "'";
                    if (dtBTMData.Rows[i]["InvoiceNo"] != DBNull.Value)
                    {

                        DataRow[] dr = dtBTMData.Select(strWhere1);
                        if (dr.Length > 0)
                        {
                            counter = counter + 1;
                            if (dsBTMData.Tables[0].Rows[i]["Error"] == DBNull.Value && dtBTMData.Rows[i]["Error"] == string.Empty)
                            {
                                dtBTMData.Rows[i]["Error"] = "Same invoice no with multiple dates!";
                            }
                            else
                                dtBTMData.Rows[i]["Error"] += ";Same invoice no with multiple dates!";
                        }
                    }
                    string strWhere2 = "'" + dtBTMData.Rows[i]["SPLANTCODE"].ToString().Trim() + "'='" + dtBTMData.Rows[i]["RPLANTCODE"].ToString().Trim() + "'";
                    if (dtBTMData.Rows[i]["RPLANTCODE"] != DBNull.Value && dtBTMData.Rows[i]["SPLANTCODE"] != DBNull.Value)
                    {
                        DataRow[] dr = dtBTMData.Select(strWhere2);
                        if (dr.Length > 0)
                        {
                            counter = counter + 1;
                            if (dsBTMData.Tables[0].Rows[i]["Error"] == DBNull.Value && dtBTMData.Rows[i]["Error"] == string.Empty)
                            {
                                dtBTMData.Rows[i]["Error"] = "Sending Stock to the same plant!<br/>";
                            }
                            else
                                dtBTMData.Rows[i]["Error"] += ";Sending Stock to the same plant!<br/>";
                        }
                    }
                }
            }

            if (counter > 1)
            {
                
                dsSapInfo.Merge(dtBTMData);
                objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = "Unable to inserted/Updated.";
                objSapService.MessageDetail = "Error in the Excel File Data";
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                if(result==0)
                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls","") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                else
                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                objSapService.XMLData = dsSapInfo.GetXml();
                objSapService.insertServiceTraceLog();
                //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                return false;
            }
            else
            {
                objSum = dtBTMData.Compute("sum(DISPATCHQTY)", "");
                if (Convert.ToInt32(objSum) <= 0)
                {
                    dsErrorXML = new DataSet();
                    dsErrorXML.Merge(dtBTMData);
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Unable to inserted/Updated.";
                    objSapService.MessageDetail = "Can not insert Zero Quanity";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                    Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                    if (result == 0)
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsErrorXML.GetXml();
                    objSapService.insertServiceTraceLog();
                    return false;
                }

                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtBTMData);
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapService.SapFileName = filename;
                using (WarehouseTranaction objwarehouse = new WarehouseTranaction())
                {
                    try
                    {
                        objwarehouse.BTMSapDetailXML = dsSapInfo.GetXml();
                        objwarehouse.UploadBTMSapData();
                        if (objwarehouse.BTMSapDetailXML == null)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                            objSapService.StatusValue = "Successfully inserted/Updated.";
                            objSapService.MessageDetail = "Successfully inserted/Updated.";
                            objSapService.SapServiceMethodName =EnumData.EnumSAPMethodName.BTMData.ToString();
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            objSapService.XMLData = "No Error";
                            //Copy(drSourceInfo, drTargetInfoSuccess, UploadFile.UploadedFileName); //PankajDhingra
                            return true;
                        }
                        else
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                            objSapService.StatusValue = "Error in the Data";
                            objSapService.MessageDetail = objwarehouse.BTMSapDetailXML+ " Data Corrupt for BTM";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            objSapService.XMLData = dsSapInfo.GetXml();
                            
                            //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        if (ex.Message.Contains("startIndex") == true)
                            objSapService.StatusValue = "Date is not in correct format";
                        else
                            objSapService.StatusValue = ex.Message;
                        objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                        Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                        if (result == 0)
                            objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                        else
                            objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        objSapService.XMLData = strBTMSapDetailXML;
                        //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                        throw ex;
                    }
                    finally
                    {
                        objSapService.insertServiceTraceLog();
                        //if (objSapService != null)
                        //    objSapService = null;
                    }
                }

            }


        }
        public void ValidateExcelFileBTM(out int status, string filename)        //status=0 then "Error is in the Data" else "no Error"
        {
            UploadFile.RootFolerPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
        //    PageBase.strGlobalUploadExcelPathRoot = "/";
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.BTMDataUpload;
            isSuccess = UploadFile.uploadValidExcelForBTM(ref dsSap, "Warehouse Transaction(Sap-BTM)");
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data or column Name is different than specified.";
                    objSapService.MessageDetail = UploadFile.Message;
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 2:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = "Data is not in the Correct Format";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 1:
                    if (InsertDataBTM(dsSap, filename))
                        blnStatus = true;
                    else
                        blnStatus = false;
                    break;
            }
            hslist.Add(filename, blnStatus);

            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;             //Not successfully uploaded
            else
                status = 1;

            //if (blnStatus)
            //    status = 1;
            //else
            //    status = 0;

        }
        public void ValidateExcelFileMOD(out int status, string filename,int value)
        {
            UploadFile.RootFolerPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
         //   PageBase.strGlobalUploadExcelPathRoot = "/";
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.MODDataUpload;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            if(value==0)
            isSuccess = UploadFile.uploadValidExcelMoD(ref dsSap, "Primary Sales(Sap-MOD)");
            else if (value==2)
                isSuccess = UploadFile.uploadValidExcelMoDForScheme(ref dsSap, "PrimarySalesPOC");//Pankaj Dhingra for POC
            else
                isSuccess = UploadFile.uploadValidExcelModForGfive(ref dsSap, "Primary Sales(Sap-MOD)Gfive_1");
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data or column Name is different than specified.";
                    objSapService.MessageDetail = UploadFile.Message;
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                    if (value == 0)
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    else
                     objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName);     //PankajDhingra
                    break;
                case 2:
                    DataSet dterrro = new DataSet();
                    dterrro.Tables.Add(dsSap.Tables[0].DefaultView.ToTable(true, new string[] { "Error" }));
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = dterrro.GetXml();
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                    if(value==0)
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls"; 
                    else
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx"; 
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 1:
                    if (value != 2)
                    {
                        if (InsertDataMOD(dsSap, filename, value))
                            blnStatus = true;
                        else
                            blnStatus = false;
                    }
                    if (value == 2)
                    {
                        if (InsertDataMODPOCForScheme(dsSap, filename, value))
                            blnStatus = true;
                        else
                            blnStatus = false;
                    }
                    break;
            }

            hslist.Add(filename, blnStatus);
            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;
            else
                status = 1;
        }//status=0 then "Error is in the Data" else "no Error"
        public void ValidateExcelFileMODBasePOC(out int status, string filename, int value)
        {
            UploadFile.RootFolerPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
            //   PageBase.strGlobalUploadExcelPathRoot = "/";
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.MODDataUpload;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            if (value == 0)
                isSuccess = UploadFile.uploadValidExcelMoD(ref dsSap, "PrimarySales(BasePOC)");
            else
                isSuccess = UploadFile.uploadValidExcelModForGfive(ref dsSap, "Primary Sales(Sap-MOD)Gfive_1");
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data or column Name is different than specified.";
                    objSapService.MessageDetail = UploadFile.Message;
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                    objSapService.SapFileName = filename;
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName);     //PankajDhingra
                    break;
                case 2:
                    DataSet dterrro = new DataSet();
                    dterrro.Tables.Add(dsSap.Tables[0].DefaultView.ToTable(true, new string[] { "Error" }));
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = dterrro.GetXml();
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                    if (value == 0)
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 1:
                    if (InsertDataMODBasePOC(dsSap, filename, value))
                        blnStatus = true;
                    else
                        blnStatus = false;
                    break;
            }

            hslist.Add(filename, blnStatus);
            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;
            else
                status = 1;
        }

        public Boolean InsertDataMOD(DataSet dsMODData, string filename,int value)
        {
            DirectoryInfo drSourceInfo = new DirectoryInfo(HttpContext.Current.Request.MapPath(PageBase.SapDirectoryPath));
            DirectoryInfo drTargetInfoFailure = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Failure");
            DirectoryInfo drTargetInfoSuccess = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Success");
            counter = 1;
            DataSet dsNew = new DataSet();
            DataTable dtFullRecord = new DataTable();
            DataTable dtFilter;
            DataTable dtMODSales = dsMODData.Tables[0];
            DataColumn dcSalesFromID = new DataColumn();
            dcSalesFromID.DataType = System.Type.GetType("System.String");
            dcSalesFromID.ColumnName = "SalesFromID";
            for (int i = 0; i < dsMODData.Tables[0].Columns.Count; i++)
            {
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace(" ", "");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace(".", "");
                //for Gfive  but will work for both (Beetel & GFive)
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("INVOICE_DATE", "BillingDate");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("INVOICE_NO", "BillingDocumentNumber");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("TOTAL_QTY", "Quantity");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("SKU_CODE", "MaterialCode");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("WHCODE", "Plant");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("DEALER/Plant", "SoldtoParty");

              

            }
            using (CommonData ObjCommom = new CommonData())
            {
                dtMODSales = ObjCommom.GettvpTablePrimarySales1();
            }

            if (dtMODSales.Columns.Contains("SalesFromID") == false)
                dtMODSales.Columns.Add(dcSalesFromID);

            foreach (DataRow dr in dsMODData.Tables[0].Rows)
            {
                strDateTime = Convert.ToString(dr["BillingDate"].ToString()).Substring(3, 2);
                strDateTime = strDateTime + "-" + Convert.ToString(dr["BillingDate"].ToString()).Substring(0, 2);
                strDateTime = strDateTime + "-" + Convert.ToString(dr["BillingDate"].ToString()).Substring(6, 4);
                DataRow drow = dtMODSales.NewRow();
                drow[0] = dr["SoldtoParty"].ToString();
                drow[1] = dr["BillingDocumentNumber"].ToString();
                drow[2] = Convert.ToDateTime(strDateTime);
                drow[3] = dr["MaterialCode"].ToString();
                drow[4] = dr["Quantity"].ToString();
                drow[5] = dr["Plant"].ToString();
                dtMODSales.Rows.Add(drow);
            }
            dtMODSales.AcceptChanges();

            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";

            if (dtMODSales.Columns.Contains("Error") == false)
                dtMODSales.Columns.Add(dcError);

            dtFullRecord = dtMODSales.Clone();
            if (dtMODSales.Rows.Count== 0)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtMODSales);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated. due to Zero Quantity";
                objSapBTM.MessageDetail = "Error in the Excel File Data due to Zero Quantity";
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                Copy(drSourceInfo, drTargetInfoFailure, filename);
                return false;
            }


            for (int count = 0; count < 2; count++)
            {
                if (count == 0)
                {
                    dtMODSales.DefaultView.RowFilter = "Quantity>0";
                    dtFilter = dtMODSales.DefaultView.ToTable();
                    //Ds = new DataSet();
                    //Ds.Merge(dtFilter);
                }
                else
                {
                    dtMODSales.DefaultView.RowFilter = "Quantity<0";
                    dtFilter = dtMODSales.DefaultView.ToTable();
                    //Ds = new DataSet();
                    //Ds.Merge(dtFilter);
                }
                if (dtFilter.Rows.Count > 0)
                {
                    for (int i = 0; i <= dtFilter.Rows.Count - 1; i++)
                    {
                        if (dtFilter != null && dtFilter.Rows.Count > 0)
                        {
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value)
                            {
                                //Here i was using dtMODSales instead of dtfilter       
                                string strWhere = "SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter+1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different ToPlantCode";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different ToPlantCode";
                                }
                            }
                            if (dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                //Here i was using dtMODSales instead of dtfilter       
                                string strWhere = "SalesFromID<>'" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode";
                                }
                            }
                            //Same Invoice Number has different TD Code
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value || dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                string strWhere = "SalesFromID<>'" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "' and SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter+1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtMODSales.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                                }
                                

                                TimeSpan ts = Convert.ToDateTime(dtFilter.Rows[i]["invoiceDate"]).Subtract(System.DateTime.Now.Date);
                                if (ts.Days > 0)
                                {
                                    ErrorCounter = ErrorCounter+1;
                                    if (dtFilter.Rows[i]["Error"] != DBNull.Value)
                                        dtFilter.Rows[i]["Error"] = " Invoice date should not be greater than current date!<br/>";
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Invoice date should not be greater than current date!<br/>";
                                }
                            }
                            //Multiple invoice date with same invoiceNumber
                            string strWhere1 = "InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'and InvoiceDate <>'" + dtFilter.Rows[i]["InvoiceDate"].ToString().Trim() + "'";
                            if (dtFilter.Rows[i]["InvoiceNumber"] != DBNull.Value)
                            {
                                DataRow[] dr = dtFilter.Select(strWhere1);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same invoice no with multiple dates!<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Same invoice no with multiple dates!<br/>";
                                }
                            }
                            string strWhere2 = "'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "'='" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "'";
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value && dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                DataRow[] dr = dtFilter.Select(strWhere2);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter+1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Sending Stock to the same plant!<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Sending Stock to the same plant!<br/>";
                                }
                            }
                        }
      
                    }
                    foreach (DataRow dr1 in dtFilter.Rows)
                    {
                        dtFullRecord.ImportRow(dr1);
                    }
                   
                }

            }

            if (ErrorCounter > 1)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtFullRecord);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated.";
                objSapBTM.MessageDetail = dsSapInfo.GetXml();
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                if (value == 0)
                {
                    Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                    if (result == 0)
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                }
                else
                {
                    Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                    if (result == 0)
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                }
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                //Copy(drSourceInfo, drTargetInfoFailure, filename);     //PankajDhingra
                return false;
            }
            else
            {
                if (dtFullRecord.Columns.Contains("Error") == true)
                    dtFullRecord.Columns.Remove("Error");
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtFullRecord);
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapService.SapFileName = filename;
                using (SalesData objMODSales = new SalesData())
                {
                    try
                    {
                        objMODSales.EntryType = EnumData.eEntryType.eUpload;
                        objMODSales.InsertPrimarySalesInfoMODUpload(dtFullRecord,value);
                        if (objMODSales.ErrorDetailXML == null)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                            objSapService.StatusValue = "Successfully inserted/Updated.";
                            objSapService.MessageDetail = "Successfully inserted/Updated.";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                            if (value == 0)
                            {
                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            else
                            {
                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            objSapService.XMLData = "No Error";
                            objSapService.insertServiceTraceLog();
                            //Copy(drSourceInfo, drTargetInfoSuccess, filename);     //PankajDhingra
                            return true;

                        }
                        else
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                            objSapService.StatusValue = "Error in the Data";
                            objSapService.MessageDetail = objMODSales.ErrorDetailXML + " Data Corrupt";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                            if (value == 0)
                            {
                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            else
                            {

                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            objSapService.XMLData = dsSapInfo.GetXml();
                            objSapService.insertServiceTraceLog();
                            //Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        if (ex.Message.Contains("startIndex")==true)
                        objSapService.StatusValue = "Date is not in correct format" ;
                        else
                          objSapService.StatusValue = ex.Message;
                        objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        if (value == 0)
                        {
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        }
                        else
                        {
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        }
                        objSapService.XMLData = strBTMSapDetailXML;
                        objSapService.insertServiceTraceLog();
                        //Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                        throw ex;
                    }
                    finally
                    {
                        //objSapService.insertServiceTraceLog();
                        //if (objSapService != null)
                            //objSapService = null;
                    }
                }

            }


        }
        public Boolean InsertDataMODBasePOC(DataSet dsMODData, string filename, int value)
        {
            DirectoryInfo drSourceInfo = new DirectoryInfo(HttpContext.Current.Request.MapPath(PageBase.SapDirectoryPath));
            DirectoryInfo drTargetInfoFailure = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Failure");
            DirectoryInfo drTargetInfoSuccess = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Success");
            counter = 1;
            DataSet dsNew = new DataSet();
            DataTable dtFullRecord = new DataTable();
            DataTable dtFilter;
            DataTable dtMODSales = dsMODData.Tables[0];
           
            using (CommonData ObjCommom = new CommonData())
            {
                dtMODSales = ObjCommom.GettvpTablePrimarySalesBasePOC();
            }

           foreach (DataRow dr in dsMODData.Tables[0].Rows)
            {
               
                DataRow drow = dtMODSales.NewRow();
                drow[0] = dr["SoldtoParty"].ToString();
                drow[1] = dr["BillingDocumentNumber"].ToString();
                drow[2] = dr["BillingDate"].ToString();
                drow[3] = dr["MaterialCode"].ToString();
                drow[4] = dr["Quantity"].ToString();
                drow[5] = dr["Plant"].ToString();
                drow[6] = dr["DocketNumber"].ToString();
                drow[7] = dr["DocketDate"].ToString();
                drow[8] = dr["CarrierName"].ToString();
                drow[9] = dr["ItemPrice"].ToString();
                drow[10] = dr["TotalInvoiceValue"].ToString();
                drow[11] = dr["PurchaseOrderNumber"].ToString();
                dtMODSales.Rows.Add(drow);
            }
            dtMODSales.AcceptChanges();

            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";

            if (dtMODSales.Columns.Contains("Error") == false)
                dtMODSales.Columns.Add(dcError);

            dtFullRecord = dtMODSales.Clone();
            if (dtMODSales.Rows.Count == 0)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtMODSales);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated. due to Zero Quantity";
                objSapBTM.MessageDetail = "Error in the Excel File Data due to Zero Quantity";
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                Copy(drSourceInfo, drTargetInfoFailure, filename);
                return false;
            }


            for (int count = 0; count < 2; count++)
            {
                if (count == 0)
                {
                    dtMODSales.DefaultView.RowFilter = "Quantity>0";
                    dtFilter = dtMODSales.DefaultView.ToTable();
                    //Ds = new DataSet();
                    //Ds.Merge(dtFilter);
                }
                else
                {
                    dtMODSales.DefaultView.RowFilter = "Quantity<0";
                    dtFilter = dtMODSales.DefaultView.ToTable();
                    //Ds = new DataSet();
                    //Ds.Merge(dtFilter);
                }
                if (dtFilter.Rows.Count > 0)
                {
                    for (int i = 0; i <= dtFilter.Rows.Count - 1; i++)
                    {
                        if (dtFilter != null && dtFilter.Rows.Count > 0)
                        {
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value)
                            {
                                //Here i was using dtMODSales instead of dtfilter       
                                string strWhere = "SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different ToPlantCode";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different ToPlantCode";
                                }
                            }
                            if (dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                //Here i was using dtMODSales instead of dtfilter       
                                string strWhere = "SalesFromID<>'" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode";
                                }
                            }
                            //Same Invoice Number has different TD Code
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value || dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                string strWhere = "SalesFromID<>'" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "' and SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtMODSales.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                                }


                                TimeSpan ts = Convert.ToDateTime(dtFilter.Rows[i]["invoiceDate"]).Subtract(System.DateTime.Now.Date);
                                if (ts.Days > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] != DBNull.Value)
                                        dtFilter.Rows[i]["Error"] = " Invoice date should not be greater than current date!<br/>";
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Invoice date should not be greater than current date!<br/>";
                                }
                            }
                            //Multiple invoice date with same invoiceNumber
                            string strWhere1 = "InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'and InvoiceDate <>'" + dtFilter.Rows[i]["InvoiceDate"].ToString().Trim() + "'";
                            if (dtFilter.Rows[i]["InvoiceNumber"] != DBNull.Value)
                            {
                                DataRow[] dr = dtFilter.Select(strWhere1);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same invoice no with multiple dates!<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Same invoice no with multiple dates!<br/>";
                                }
                            }
                            string strWhere2 = "'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "'='" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "'";
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value && dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                DataRow[] dr = dtFilter.Select(strWhere2);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Sending Stock to the same plant!<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Sending Stock to the same plant!<br/>";
                                }
                            }
                        }

                    }
                    foreach (DataRow dr1 in dtFilter.Rows)
                    {
                        dtFullRecord.ImportRow(dr1);
                    }

                }

            }

            if (ErrorCounter > 1)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtFullRecord);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated.";
                objSapBTM.MessageDetail = dsSapInfo.GetXml();
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                if (value == 0)
                {
                    Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                    if (result == 0)
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                }
                else
                {
                    Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                    if (result == 0)
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                }
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                //Copy(drSourceInfo, drTargetInfoFailure, filename);     //PankajDhingra
                return false;
            }
            else
            {
                if (dtFullRecord.Columns.Contains("Error") == true)
                    dtFullRecord.Columns.Remove("Error");
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtFullRecord);
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapService.SapFileName = filename;
                using (SalesData objMODSales = new SalesData())
                {
                    try
                    {
                        objMODSales.EntryType = EnumData.eEntryType.eUpload;
                        objMODSales.InsertPrimarySalesInfoMODUpload(dtFullRecord, value);
                        if (objMODSales.ErrorDetailXML == null)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                            objSapService.StatusValue = "Successfully inserted/Updated.";
                            objSapService.MessageDetail = "Successfully inserted/Updated.";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                            if (value == 0)
                            {
                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            else
                            {
                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            objSapService.XMLData = "No Error";
                            objSapService.insertServiceTraceLog();
                            //Copy(drSourceInfo, drTargetInfoSuccess, filename);     //PankajDhingra
                            return true;

                        }
                        else
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                            objSapService.StatusValue = "Error in the Data";
                            objSapService.MessageDetail = objMODSales.ErrorDetailXML + " Data Corrupt";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                            if (value == 0)
                            {
                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            else
                            {

                                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                                if (result == 0)
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                                else
                                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            }
                            objSapService.XMLData = dsSapInfo.GetXml();
                            objSapService.insertServiceTraceLog();
                            //Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        if (ex.Message.Contains("startIndex") == true)
                            objSapService.StatusValue = "Date is not in correct format";
                        else
                            objSapService.StatusValue = ex.Message;
                        objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        if (value == 0)
                        {
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        }
                        else
                        {
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        }
                        objSapService.XMLData = strBTMSapDetailXML;
                        objSapService.insertServiceTraceLog();
                        //Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                        throw ex;
                    }
                    finally
                    {
                        //objSapService.insertServiceTraceLog();
                        //if (objSapService != null)
                        //objSapService = null;
                    }
                }

            }


        }

        public void ValidateExcelFileGRN(out int status, string filename)
        {
            UploadFile.RootFolerPath =HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
          //  PageBase.strGlobalUploadExcelPathRoot = "/";
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.GRNDataUpload;
            isSuccess = UploadFile.uploadValidExcelForBTM(ref dsSap, "GRN(Sap-GRN)");
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data or column Name is different than specified.";
                    objSapService.MessageDetail = "No Data";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 2:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = "Data is not in the Correct Format";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName);//PankajDhingra
                    break;
                case 1:
                    if (InsertDataGRN(dsSap, filename))
                        blnStatus = true;
                    else
                        blnStatus = false;
                    break;
            }

            hslist.Add(filename, blnStatus);
            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;
            else
                status = 1;

        }
        //}//status=0 then "Error is in the Data" else "no Error"
        public Boolean InsertDataGRN(DataSet dsGRNData, string filename)
        {
            DataSet dsNew = new DataSet();
            DataTable dtMODSales = dsGRNData.Tables[0];
            DataColumn dcSalesFromID = new DataColumn();
            dcSalesFromID.DataType = System.Type.GetType("System.String");
            dcSalesFromID.ColumnName = "SalesFromID";
            for (int i = 0; i < dsGRNData.Tables[0].Columns.Count; i++)
            {
                dsGRNData.Tables[0].Columns[i].ColumnName = (dsGRNData.Tables[0].Columns[i].ColumnName).Replace(" ", "");
                dsGRNData.Tables[0].Columns[i].ColumnName = (dsGRNData.Tables[0].Columns[i].ColumnName).Replace(".", "");
            }
            using (CommonData ObjCommom = new CommonData())
            {
                dtMODSales = ObjCommom.GettvpTableGRNUpload();
            }
        
            if (dtMODSales.Columns.Contains("SalesFromID") == false)
                dtMODSales.Columns.Add(dcSalesFromID);


            foreach (DataRow dr in dsGRNData.Tables[0].Rows)
            {
                DataRow drow = dtMODSales.NewRow();
                strDateTime = Convert.ToString(dr["PstngDate"].ToString()).Substring(3, 2);
                strDateTime = strDateTime + "-" + Convert.ToString(dr["PstngDate"].ToString()).Substring(0, 2);
                strDateTime = strDateTime + "-" + Convert.ToString(dr["PstngDate"].ToString()).Substring(6, 4);
                drow[0] = dr["Plnt"].ToString();
                drow[1] = dr["MatDoc"].ToString();
                drow[2] = Convert.ToDateTime(strDateTime);
                drow[3] = dr["PO"].ToString();
                drow[4] = System.DateTime.Now.ToShortDateString();
                drow[5] = 0;
                drow[6] = System.DateTime.Now.ToShortDateString();
                drow[7] = dr["Material"].ToString();
                drow[8] = dr["Quantity"].ToString();
                drow[9] = 0;             //Here no body is selling this is Direct receiving by warehouses
                dtMODSales.Rows.Add(drow);
            }
            dtMODSales.AcceptChanges();

            DataTable dtDataGrn = dtMODSales.Clone();
            foreach (DataColumn dc in dtDataGrn.Columns)
            {
                if (dc.DataType == typeof(string) && dc.ColumnName == "PstngDate")
                {
                    dc.DataType = typeof(System.DateTime);
                }
                if (dc.DataType == typeof(string) && dc.ColumnName == "Quantity")
                {
                    dc.DataType = typeof(System.Int32);
                }
            }
            foreach (DataRow drRow in dtMODSales.Rows)
            {
                dtDataGrn.ImportRow(drRow);
            }

            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";

            if (dtDataGrn.Columns.Contains("Error") == false)
                dtDataGrn.Columns.Add(dcError);
            
            //Checks for the uploading data for authentication
            if (dtDataGrn.Rows.Count > 0)
            {
                counter = 1;
                for (int i = 0; i <= dtDataGrn.Rows.Count - 1; i++)
                {
                    if (dtDataGrn != null && dtDataGrn.Rows.Count > 0)
                    {
                        if (dtDataGrn.Rows[i]["WareHouseCode"] != DBNull.Value)
                        {
                            //string strWhere = "SalesChannelCode<>'" + dtMODSales.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtMODSales.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                            //DataRow[] dr = dtMODSales.Select(strWhere);
                            //if (dr.Length > 0)
                            //{
                            //    counter += counter;
                            //    if (dtMODSales.Rows[i]["Error"] == DBNull.Value && dtMODSales.Rows[i]["Error"] == string.Empty)
                            //    {
                            //        dtMODSales.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode";
                            //    }
                            //    else
                            //        dtMODSales.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode";
                            //}
                        }
                        //Same Invoice Number has different TD Code
                        if (dtDataGrn.Rows[i]["WareHouseCode"] != DBNull.Value )
                        {
                            string strWhere = "WareHouseCode<>'" + dtDataGrn.Rows[i]["WareHouseCode"].ToString().Trim() + "' and GRNNumber='" + dtDataGrn.Rows[i]["GRNNumber"].ToString().Trim() + "'";
                            //string strWhere = "SalesFromID<>'" + dtMODSales.Rows[i]["SalesFromID"].ToString().Trim() + "' and SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                            DataRow[] dr = dtDataGrn.Select(strWhere);
                            if (dr.Length > 0)
                            {
                                counter = counter+1;
                                if (dtDataGrn.Rows[i]["Error"] == DBNull.Value && dtDataGrn.Rows[i]["Error"] == string.Empty)
                                {
                                    dtDataGrn.Rows[i]["Error"] = "Same GRN Number has different Plant Code<br/>";
                                }
                                else
                                    dtDataGrn.Rows[i]["Error"] = ";Same GRN Number has different Plant Code<br/>";
                            }
                            //Invoice Date Should not be greater than today's date

                            //strDateTime = Convert.ToString(dtDataGrn.Rows[i]["InvoiceDate"]).Substring(3, 2);
                            //strDateTime = strDateTime + "-" + Convert.ToString(dtDataGrn.Rows[i]["InvoiceDate"]).Substring(0, 2);
                            //strDateTime = strDateTime + "-" + Convert.ToString(dtDataGrn.Rows[i]["InvoiceDate"]).Substring(6, 4);
                            //DateTime dtBillingDate = Convert.ToDateTime(strDateTime);
                            DateTime dtBillingDate = Convert.ToDateTime(dtDataGrn.Rows[i]["GrnDate"]);
                            //DateTime dtBillingDate = Convert.ToDateTime(dtFilter.Rows[i]["InvoiceDate"]);
                            TimeSpan ts = dtBillingDate.Subtract(System.DateTime.Now.Date);
                            if (ts.Days > 0)
                            {
                                counter = counter + 1;
                                if (dtDataGrn.Rows[i]["Error"] != DBNull.Value)
                                    dtDataGrn.Rows[i]["Error"] = " Posting date should not be greater than current date!<br/>";
                                else
                                    dtDataGrn.Rows[i]["Error"] += ";Posting date should not be greater than current date!<br/>";
                            }
                        }
                        //Multiple invoice date with same invoiceNumber
                        string strWhere1 = "GrnNumber='" + dtDataGrn.Rows[i]["GrnNumber"].ToString().Trim() + "'and GrnDate <>'" + dtDataGrn.Rows[i]["GrnDate"].ToString().Trim() + "'";
                        if (dtDataGrn.Rows[i]["GrnNumber"] != DBNull.Value)
                        {
                            DataRow[] dr = dtDataGrn.Select(strWhere1);
                            if (dr.Length > 0)
                            {
                                counter = counter + 1;
                                if (dtDataGrn.Rows[i]["Error"] == DBNull.Value && dtDataGrn.Rows[i]["Error"] == string.Empty)
                                {
                                    dtDataGrn.Rows[i]["Error"] = "Same MAt Doc no with multiple dates!<br/>";
                                }
                                else
                                    dtDataGrn.Rows[i]["Error"] += ";Same Mat Doc no with multiple dates!<br/>";
                            }
                        }

                    }
                }
            }
            if (counter > 1)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtDataGrn);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated.";
                objSapBTM.MessageDetail = dsSapInfo.GetXml()+"<br/>"+" File data is not in correct Format";
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                if (result == 0)
                    objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                else
                    objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                return false;
            }
            else
            {
                objSum = dtDataGrn.Compute("sum(Quantity)", "");
                if (Convert.ToInt32(objSum) <= 0)
                {
                    dsErrorXML = new DataSet();
                    dsErrorXML.Merge(dtDataGrn);
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Unable to inserted/Updated.";
                    objSapService.MessageDetail = "Error in the Excel File Data";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                    if (result == 0)
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    else
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsErrorXML.GetXml();
                    objSapService.insertServiceTraceLog();
                    return false;
                }

                if (dtDataGrn.Columns.Contains("Error") == true)
                    dtDataGrn.Columns.Remove("Error");
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtDataGrn);
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapService.SapFileName = filename;
                using (SalesData objMODSales = new SalesData())
                {
                    try
                    {
                        objMODSales.EntryType = EnumData.eEntryType.eUpload;
                        objMODSales.InsertInfoGRNSapUpload(dtDataGrn);
                        if (objMODSales.ErrorDetailXML == null)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                            objSapService.StatusValue = "Successfully inserted/Updated.";
                            objSapService.MessageDetail = "Successfully inserted/Updated.";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                            //objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapBTM.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            objSapService.XMLData = dsSapInfo.GetXml();
                            //Copy(drSourceInfo, drTargetInfoSuccess, UploadFile.UploadedFileName); //PankajDhingra
                            return true;

                        }
                        else
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                            objSapService.StatusValue = "Error in the Data";
                            objSapService.MessageDetail = objMODSales.ErrorDetailXML+"Data Corrupt";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                            Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                            if (result == 0)
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            else
                                objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx"; objSapService.XMLData = objMODSales.ErrorDetailXML;
                            //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        if (ex.Message.Contains("startIndex") == true)
                            objSapService.StatusValue = "Date is not in correct format";
                        else
                            objSapService.StatusValue = ex.Message;
                        objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                        Int64.TryParse((filename.Replace(".xlsx", "").Trim()).Replace(".xls", ""), out result);
                        if (result == 0)
                            objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                        else
                            objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx"; 
                        objSapService.XMLData = strBTMSapDetailXML;
                        //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                        throw ex;
                    }
                    finally
                    {
                        objSapService.insertServiceTraceLog();
                    }
                }

            }


        }
        private Boolean AuthenticateAccess()
        {
           
            //Chilkat.SFtp sftp = new Chilkat.SFtp();
            success = sftp.UnlockComponent("ZEDAXISSH_sAMqZRwu1CnY");
           
            if (success != true)
            {
                objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = SapService.ExceptionOccured + " about trial";
                objSapService.MessageDetail = SapService.ExceptionOccured + " about trial";
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                objSapService.SapFileName = "NA";
                objSapService.XMLData = "30-days Trial has expired";
                objSapService.insertServiceTraceLog();
                return false;
            }
            sftp.ConnectTimeoutMs = 5000;
            sftp.IdleTimeoutMs = 10000;
            int port;
            string hostname;
            //hostname = obj.ftpServerLocalIP;
            hostname = PageBase.sFtpServerIP;
            port = 22;
            success = sftp.Connect(hostname, port);
            if (success != true)
            {
                objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = SapService.ExceptionOccured + " Host name or Port is wrong";
                objSapService.MessageDetail = SapService.ConnectionFailed;
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                objSapService.SapFileName = "NA";
                objSapService.XMLData = SapService.ConnectionFailed;
                objSapService.insertServiceTraceLog();
                return false;
            }
            //success = sftp.AuthenticatePw(PageBase.sFtpServerUserName, PageBase.sFtpServerPassword);
            for (int i = 0; i < 3; i++)
            {
                success = sftp.AuthenticatePw(PageBase.sFtpServerUserName, PageBase.sFtpServerPassword);
                if (success == true)
                    break;
            }
           
            if (success != true)
            {
                objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = SapService.ExceptionOccured;
                objSapService.MessageDetail = SapService.ConnectionFailed + " ,Wrong Credentials!";
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                objSapService.SapFileName = "NA";
                objSapService.XMLData = SapService.ExceptionOccured;
                objSapService.insertServiceTraceLog();
                return false;
            }
            success = sftp.InitializeSftp();
            if (success != true)
            {
                objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = SapService.ExceptionOccured;
                objSapService.MessageDetail = SapService.ConnectionFailed + ", Initialization Failed!";
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                objSapService.SapFileName = "NA";
                objSapService.XMLData = SapService.ExceptionOccured;
                objSapService.insertServiceTraceLog();
                return false;
            }
            return true;
        }
        public string GetDataFromFTPForProcessing()
        {
            try
            {
                if (AuthenticateAccess())
                {
                    handle = sftp.OpenDir(PageBase.sFtpServerRemoteDir);
                    if (handle == null)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objSapService.StatusValue = SapService.NoFileExistDownLoad;
                        objSapService.MessageDetail = SapService.NoFileExistDownLoad;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                        objSapService.SapFileName = "NA";
                        objSapService.XMLData = SapService.ExceptionOccured;
                        objSapService.insertServiceTraceLog();
                        return "Ftp Handler Could not be Created";
                    }
                    //  Download the directory listing:
                    Chilkat.SFtpDir dirListing = null;
                    dirListing = sftp.ReadDir(handle);
                    if (dirListing == null)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objSapService.StatusValue = SapService.NoFileExistDownLoad;
                        objSapService.MessageDetail = SapService.NoFileExistDownLoad;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                        objSapService.SapFileName = "NA";
                        objSapService.XMLData = SapService.ExceptionOccured;
                        objSapService.insertServiceTraceLog();
                        return "No File Exist For Further Processing";
                    }
                    int n = dirListing.NumFilesAndDirs;
                    if (n == 0)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objSapService.StatusValue = SapService.NoFileExistDownLoad;
                        objSapService.MessageDetail = SapService.NoFileExistDownLoad;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                        objSapService.SapFileName = "NA";
                        objSapService.XMLData = SapService.ExceptionOccured;
                        objSapService.insertServiceTraceLog();

                    }
                    else
                    {
                        for (counter = 0; counter <= n - 1; counter++)
                        {
                            Chilkat.SFtpFile fileObj = null;
                            fileObj = dirListing.GetFileObject(counter);
                            //textBox1.Text += fileObj.Filename + "\r\n";
                            //  Does this filename match the desired pattern?
                            //  Write code here to determine if it's a match or not.
                            //  Assuming it's a match, you would download the file
                            //  like this:
                            if (fileObj.FileType != "directory")
                            {
                                //remoteFilePath = obj.ftpRemoteDir + "/";
                                remoteFilePath = PageBase.sFtpServerRemoteDir + "/";
                                remoteFilePath = remoteFilePath + fileObj.Filename;
                                string localFilePath;
                                localFilePath = fileObj.Filename;
                                success = sftp.DownloadFileByName(remoteFilePath, HttpContext.Current.Server.MapPath( PageBase.SapDirectoryPath)  + localFilePath);
                                //  success = sftp.DownloadFileByName(remoteFilePath, Server.MapPath("../" + SapDirectoryPath) + "/" + localFilePath);
                                if (success != true)
                                {
                                    objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                    objSapService.StatusValue = SapService.NoFileExistDownLoad;
                                    objSapService.MessageDetail = SapService.ExceptionOccured;
                                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                                    objSapService.SapFileName = "NA";
                                    objSapService.XMLData = SapService.ExceptionOccured;
                                    objSapService.insertServiceTraceLog();
                                    //return;
                                }
                            }

                        }
                      
                        //DirectoryInfo dir = new DirectoryInfo(Server.MapPath("../" + SapDirectoryPath));
                        string strPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
                        ///This block of code will convert the .xls file into .xlsx at the same location
                        ///and previous would be deleted            //Pankaj Dhingra
                        DirectoryInfo dirXLS = new DirectoryInfo(strPath);
                        FileInfo[] drFilesXLS = dirXLS.GetFiles("*.xls");
                        foreach (FileInfo fi in drFilesXLS)
                        {
                            string FileNameToConvert = "";
                            if (fi.Name.ToLower().Contains("mod") == true)
                            {
                                FileNameToConvert = fi.Name.ToString();
                                PageBase.ConvertXLStoXLSX(strPath, ref FileNameToConvert);
                                fi.Delete();
                            }
                            if (fi.Name.ToLower().Contains("grn") == true)
                            {
                                FileNameToConvert = fi.Name.ToString();
                                PageBase.ConvertXLStoXLSX(strPath, ref FileNameToConvert);
                                fi.Delete();
                            }
                            if (fi.Name.ToLower().Contains("imei") == true)
                            {
                                FileNameToConvert = fi.Name.ToString();
                                PageBase.ConvertXLStoXLSX(strPath, ref FileNameToConvert);
                                fi.Delete();
                            }
                            if (fi.Name.ToLower().Contains("btm") == true)
                            {
                                FileNameToConvert = fi.Name.ToString();
                                PageBase.ConvertXLStoXLSX(strPath, ref FileNameToConvert);
                                fi.Delete();
                            }


                        }
                       
                        DirectoryInfo dir = new DirectoryInfo(strPath);
                        FileInfo[] drFiles = dir.GetFiles("*.xls");

                        if (drFiles.Length == 0)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                            objSapService.StatusValue = SapService.DownLoadFailed + " For further Processing!";
                            objSapService.MessageDetail = SapService.DownLoadFailed;
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                            objSapService.SapFileName = "No File Exits";
                            objSapService.insertServiceTraceLog();
                        }
                        else
                        {
                            foreach (FileInfo fi in drFiles)
                            {
                                if (fi.Name.ToLower().Contains("mod")==true)
                                {
                                    try
                                    {
                                        UploadFile.RootFolerPath = dir.FullName;
                                        ValidateExcelFileMOD(out status, fi.Name, 0);
                                        if (status == 1)
                                        {
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Success/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                        else
                                        {
                                            SapService objSapService = new SapService();
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Failure/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {

                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        SapService obj = new SapService();
                                        obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                                        obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                                        obj.StatusValue = SapService.ExceptionOccured;
                                        obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                                        obj.SapServiceMethodName = SapService.ExceptionOccured;
                                        obj.SapFileName = UploadFile.UploadedFileName;
                                        obj.XMLData = SapService.ExceptionOccured;
                                        obj.insertServiceTraceLog();
                                        sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        continue;
                                        return "Exception Occured";

                                    }

                                }
                               
                            }
                            foreach (FileInfo fi in drFiles)
                            {
                                if (fi.Name.ToLower().Contains("grn")==true)
                                {
                                    try
                                    {
                                        UploadFile.RootFolerPath = dir.FullName;
                                        ValidateExcelFileGRN(out status, fi.Name);
                                        if (status == 1)
                                        {
                                            // success = sftp.UploadFileByName("/success/" + ((fi.FullName).Remove(0, dir.FullName.Length + 1)), Server.MapPath("../" + SapDirectoryPath) + "/" + ((fi.FullName).Remove(0, dir.FullName.Length + 1)));
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Success/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                        else
                                        {
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Failure/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        SapService obj = new SapService();
                                        obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                                        obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                                        obj.StatusValue = SapService.ExceptionOccured;
                                        obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                                        obj.SapServiceMethodName = SapService.ExceptionOccured;
                                        obj.SapFileName = UploadFile.UploadedFileName;
                                        obj.XMLData = SapService.ExceptionOccured;
                                        obj.insertServiceTraceLog();
                                        sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        continue;
                                        return "Exception Occured";
                                    }
                                }

                                if (fi.Name.ToLower().Contains("btm")==true)
                                {
                                    try
                                    {

                                        UploadFile.RootFolerPath = dir.FullName;
                                        ValidateExcelFileBTM(out status, fi.Name);
                                        if (status == 1)
                                        {
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Success/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                                                objSapService.SapFileName = (fi.FullName).Remove(0, dir.FullName.Length + 1);
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                        else
                                        {
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Failure/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        SapService obj = new SapService();
                                        obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                                        obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                                        obj.StatusValue = SapService.ExceptionOccured;
                                        obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                                        obj.SapServiceMethodName = SapService.ExceptionOccured;
                                        obj.SapFileName = UploadFile.UploadedFileName;
                                        obj.XMLData = SapService.ExceptionOccured;
                                        obj.insertServiceTraceLog();
                                        sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        continue;
                                        return "Exception Occured";
                                    }
                                }
                                if (fi.Name.ToLower().Contains("imei") == true)
                                {
                                    try
                                    {
                                        UploadFile.RootFolerPath = dir.FullName;
                                        ValidateExcelFileIMEI(out status, fi.Name);
                                        if (status == 1)
                                        {
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Success/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                        else
                                        {
                                            success = sftp.UploadFileByName("/home/salestracker/MobileSalesTracking/Failure/" + fi.Name, strPath + fi.Name);
                                            if (success == false)
                                            {
                                                SapService objSapService = new SapService();
                                                objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                                                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                                objSapService.StatusValue = SapService.NoFileExistUploading;
                                                objSapService.MessageDetail = SapService.NoFileExistUploading;
                                                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                                                objSapService.SapFileName = fi.Name;
                                                objSapService.insertServiceTraceLog();
                                            }
                                            fi.Delete();
                                            sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        SapService obj = new SapService();
                                        obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                                        obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                                        obj.StatusValue = SapService.ExceptionOccured;
                                        obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                                        obj.SapServiceMethodName = SapService.ExceptionOccured;
                                        obj.SapFileName = UploadFile.UploadedFileName;
                                        obj.XMLData = SapService.ExceptionOccured;
                                        obj.insertServiceTraceLog();
                                        sftp.RemoveFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        continue;
                                        return "Exception Occured";
                                    }
                                }
                            }
                        }

                    }
                    return "Successfully";
                }
                else
                {
                    SapService objSapService = new SapService();
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = SapService.ConnectionFailed;
                    objSapService.MessageDetail = SapService.ConnectionFailed;
                    objSapService.SapServiceMethodName = SapService.ConnectionFailed;
                    objSapService.SapFileName = SapService.ConnectionFailed;
                    objSapService.XMLData = SapService.ExceptionOccured;
                    objSapService.insertServiceTraceLog();
                    return "Unsuccessfully";

                }
            }

            catch (Exception ex)
            {
                SapService obj = new SapService();
                obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                obj.StatusValue = SapService.ExceptionOccured;
                obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                obj.SapServiceMethodName = SapService.ExceptionOccured;
                obj.SapFileName = UploadFile.UploadedFileName;
                obj.XMLData = SapService.ExceptionOccured;
                obj.insertServiceTraceLog();
                return "Exception Occured";

            }
            finally
            {
                try
                {
                    DeleteUselessFiles();
                }
                catch (Exception ex)
                {
                }
               sftp.CloseHandle(handle);
               
            }
        }
        public void ValidateExcelFileIMEI(out int status, string filename)
        {
          //  PageBase.strGlobalUploadExcelPathRoot = "/";
            UploadFile.RootFolerPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.IMEIDataUpload;
            isSuccess = UploadFile.uploadValidExcelForBTM(ref dsSap, "IMEI(Sap-IMEI)");
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data or column Name is different than specified.";
                    objSapService.MessageDetail = "No Data";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName);     //PankajDhingra
                    break;
                case 2:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = "Data is not in the Correct Format";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();

                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 1:
                    if (InsertDataIMEI(dsSap, filename))
                        blnStatus = true;
                    else
                        blnStatus = false;
                    break;
            }

            hslist.Add(filename, blnStatus);
            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;
            else
                status = 1;
        }
        public Boolean InsertDataIMEI(DataSet dsIMEIData, string filename)
        {

            DataTable dtIMEIData = dsIMEIData.Tables[0];
            DataTable dtBlankIMEI;
            for (int i = 0; i < dsIMEIData.Tables[0].Columns.Count; i++)
            {
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace(" ", "");
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace("(", "");
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace(")", "");
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace(".", "");
            }
            using (CommonData ObjCommom = new CommonData())
            {
                dtBlankIMEI = ObjCommom.GettvpTableForIMEI();
            }
            foreach (DataRow dr in dsIMEIData.Tables[0].Rows)
            {
                DataRow drow = dtBlankIMEI.NewRow();
                drow[0] = dr["InvoiceNo"].ToString();
                drow[1] = dr["PartNo"].ToString();
                drow[2] = dr["Description"].ToString();
                drow[3] = dr["Quantity"].ToString();
                drow[4] = dr["IMEINo1"].ToString();
                drow[4] = dr["IMEINo2"].ToString();
                drow[4] = dr["IMEINo3"].ToString();
                dtBlankIMEI.Rows.Add(drow);
            }
            dtBlankIMEI.AcceptChanges();

            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";

            if (dtBlankIMEI.Columns.Contains("Error") == false)
                dtBlankIMEI.Columns.Add(dcError);

         
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtIMEIData);
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapService.SapFileName = filename;
                using (SalesData objIMEI = new SalesData())
                {
                    try
                    {
                       objIMEI.InsertInfoIMEISapUpload(dtIMEIData);
                        if (objIMEI.ErrorDetailXML == null)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                            objSapService.StatusValue = "Successfully inserted/Updated.";
                            objSapService.MessageDetail = "Successfully inserted/Updated.";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                            objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                            objSapService.XMLData = "No Error";
                            //Copy(drSourceInfo, drTargetInfoSuccess, UploadFile.UploadedFileName); //PankajDhingra
                            return true;

                        }
                        else
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                            objSapService.StatusValue = "Error in the Data";
                            objSapService.MessageDetail = dsSapInfo.GetXml()+ " Data Corrupt";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                            objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                            objSapService.XMLData = objIMEI.ErrorDetailXML;
                            //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objSapService.StatusValue = ex.Message;
                        objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        objSapService.XMLData = strBTMSapDetailXML;
                        //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                        throw ex;
                    }
                    finally
                    {
                        objSapService.insertServiceTraceLog();
                        //if (objSapService != null)
                        //    objSapService = null;
                    }
                }
        }
        //public string[] GetFileList()
        //{
        //    string[] downloadFiles;
        //    StringBuilder result = new StringBuilder();
        //    WebResponse response = null;
        //    StreamReader reader = null;
        //    try
        //    {
        //        FtpWebRequest reqFTP;
        //        reqFTP = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://" + PageBase.sFtpServerIP + "/Integration/NEW/"));
        //        reqFTP.UseBinary = true;
        //        reqFTP.Credentials = new NetworkCredential(PageBase.sFtpServerUserName, PageBase.sFtpServerPassword);
        //        reqFTP.Method = WebRequestMethods.Ftp.ListDirectory;
        //        reqFTP.Proxy = null;
        //        reqFTP.KeepAlive = false;
        //        reqFTP.UsePassive = false;
        //        response = reqFTP.GetResponse();
        //        reader = new StreamReader(response.GetResponseStream());
        //        string line = reader.ReadLine();
        //        while (line != null)
        //        {
        //            result.Append(line);
        //            result.Append("\n");
        //            line = reader.ReadLine();
        //        }
        //        // to remove the trailing '\n'
        //        result.Remove(result.ToString().LastIndexOf('\n'), 1);
        //        return result.ToString().Split('\n');
        //    }
        //    catch (Exception ex)
        //    {
        //        if (reader != null)
        //        {
        //            reader.Close();
        //        }
        //        if (response != null)
        //        {
        //            response.Close();
        //        }
        //        downloadFiles = null;
        //        return downloadFiles;
        //    }
        //}
        //public void Download(string file)
        //{                       
        //    try
        //    {
        //        file = "MOD_AmitQuantityBug.xlsx";
        //        //string uri = "ftp://" + PageBase.sFtpServerIP + "/" + "Integration/NEW/" + file;
        //        string uri = "ftp://184.154.49.74/Integration/NEW/MOD_AmitQuantityBug.xlsx";
        //        Uri serverUri = new Uri(uri);
        //        if (serverUri.Scheme != Uri.UriSchemeFtp)
        //        {
        //            return;
        //        }       
        //        FtpWebRequest reqFTP;
        //        reqFTP = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://184.154.49.74/Integration/NEW/MOD_AmitQuantityBug.xlsx"));
               
        //        reqFTP.Credentials = new NetworkCredential(PageBase.sFtpServerUserName, PageBase.sFtpServerPassword );                
        //        reqFTP.KeepAlive = false;
        //      //  reqFTP.
        //        reqFTP.Method = WebRequestMethods.Ftp.DownloadFile;
        //        reqFTP.UseBinary = true;
        //        reqFTP.Proxy = null;                 
        //   //     reqFTP.UsePassive = false;
        //        FtpWebResponse response = (FtpWebResponse)reqFTP.GetResponse();
        //        Stream responseStream = response.GetResponseStream();
        //        //FileStream writeStream = new FileStream(AppDomain.CurrentDomain.BaseDirectory + PageBase.SapDirectoryPath+"\\" + file, FileMode.Create);                
        //        FileStream writeStream = File.Create(AppDomain.CurrentDomain.BaseDirectory + PageBase.SapDirectoryPath + "\\" + file);
        //        Byte[] buffer = new Byte[writeStream.Length];
        //        int bytesRead = responseStream.Read(buffer, 0, buffer.Length);               
        //        while (bytesRead > 0)
        //        {
        //            writeStream.Write(buffer, 0, bytesRead);
        //            bytesRead = responseStream.Read(buffer, 0, buffer.Length);
        //        }                
        //        writeStream.Close();
        //        response.Close(); 
        //    }
        //    catch (WebException wEx)
        //    {
               
        //    }
        //    catch (Exception ex)
        //    {
               
        //    }
        //}
        //private void upload(string file)
        //{
        //    try
        //    {
        //        file = "MOD_AmitQuantityBug.xlsx";
        //        string uri = "ftp://" + PageBase.sFtpServerIP + "/" + "Integration/NEW/" + file;
        //        Uri serverUri = new Uri(uri);
        //        if (serverUri.Scheme != Uri.UriSchemeFtp)
        //        {
        //            return;
        //        }
        //        FtpWebRequest reqFTP;
        //        reqFTP = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://" + PageBase.sFtpServerIP + "/" + "Integration/NEW/" + file));
               
        //        reqFTP.Credentials = new NetworkCredential(PageBase.sFtpServerUserName, PageBase.sFtpServerPassword);
        //        reqFTP.KeepAlive = false;
        //        reqFTP.Method = WebRequestMethods.Ftp.UploadFile;
        //        reqFTP.UseBinary = true;
        //        reqFTP.Proxy = null;
        //        reqFTP.UsePassive = false;
        //        FtpWebResponse response = (FtpWebResponse)reqFTP.GetResponse();
        //        Stream responseStream = response.GetResponseStream();
        //        FileStream readStream = File.OpenRead(AppDomain.CurrentDomain.BaseDirectory + PageBase.SapDirectoryPath + "\\" + file);
        //        byte[] buffer = new byte[readStream.Length];
        //        readStream.Read(buffer, 0, buffer.Length);
        //        readStream.Close();
        //        Stream ftpstream = reqFTP.GetRequestStream();
        //        ftpstream.Write(buffer, 0, buffer.Length);
        //        ftpstream.Close();

        //        response.Close();
        //    }
        //    catch (WebException wEx)
        //    {

        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}
        //public StreamReader AuthenticateAccessGfive()
        //{
        //    StringBuilder result = new StringBuilder();
        //    WebResponse response = null;
        //    StreamReader reader = null;
        //    try
        //    {
        //        FtpWebRequest reqFTP;
        //        reqFTP = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://" + PageBase.sFtpServerIP + "/Integration/NEW/"));
        //        reqFTP.UseBinary = true;
        //        reqFTP.Credentials = new NetworkCredential(PageBase.sFtpServerUserName, PageBase.sFtpServerPassword);
        //        reqFTP.Method = WebRequestMethods.Ftp.ListDirectory;
        //        reqFTP.Proxy = null;
        //        reqFTP.KeepAlive = false;
        //        reqFTP.UsePassive = false;
        //        response = reqFTP.GetResponse();
        //        reader = new StreamReader(response.GetResponseStream());
        //        return reader;
        //    }
        //    catch (Exception ex)
        //    {
        //        if (reader != null)
        //        {
        //            reader.Close();
        //        }
        //        if (response != null)
        //        {
        //            response.Close();
        //        }
        //        return reader;
        //    }
        //}
        public String GetDataFromFTPForProcessingForGfive()
        {
            try
            {
                if (AuthenticateAccessForGfive())
                {
                    //success = ftp.ChangeRemoteDir("/Integration/NEW/");
                    success = ftp.ChangeRemoteDir(PageBase.sFtpServerRemoteDir);
                    if (success != true)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objSapService.StatusValue = SapService.ConnectionFailed;
                        objSapService.MessageDetail = SapService.ConnectionFailed;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                        objSapService.SapFileName = "NA";
                        objSapService.XMLData = SapService.ExceptionOccured;
                        objSapService.insertServiceTraceLog();
                        return "Ftp Handler Could not be Created";
                    }
                    int n;
                    n = ftp.NumFilesAndDirs;
                    if (n <= 0)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objSapService.StatusValue = SapService.NoFileExistDownLoad;
                        objSapService.MessageDetail = ftp.LastErrorText;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                        objSapService.SapFileName = "NA";
                        objSapService.XMLData = SapService.ExceptionOccured;
                        objSapService.insertServiceTraceLog();
                        return "No File Exist";

                    }
                    else
                    {
                        for (counter = 0; counter <= n - 1; counter++)
                        {
                            if (ftp.GetIsDirectory(counter) != true)
                            {
                                //remoteFilePath = obj.ftpRemoteDir + "/";
                                remoteFilePath = PageBase.sFtpServerRemoteDir + "/";
                                remoteFilePath = remoteFilePath + ftp.GetFilename(counter);
                                string localFilePath;
                                localFilePath = ftp.GetFilename(counter);
                                //success = ftp.GetFile(remoteFilePath, AppDomain.CurrentDomain.BaseDirectory + PageBase.SapDirectoryPath + "/" + localFilePath);
                                success = ftp.GetFile(remoteFilePath, HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath)  + localFilePath);
                                
                                if (success != true)
                                {
                                   
                                    objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                                    objSapService.StatusValue = SapService.NoFileExistDownLoad;
                                    objSapService.MessageDetail = ftp.LastErrorText;
                                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                                    objSapService.SapFileName = "NA";
                                    objSapService.XMLData = SapService.ExceptionOccured;
                                    objSapService.insertServiceTraceLog();
                                    //return;
                                }
                            }

                        }
                        //DirectoryInfo dir = new DirectoryInfo(Server.MapPath("../" + SapDirectoryPath));
                        DirectoryInfo dir = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath));
                        FileInfo[] drFiles = dir.GetFiles("*.xlsx");
                        if (drFiles.Length == 0)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                            objSapService.StatusValue = SapService.DownLoadFailed + " For further Processing!";
                            objSapService.MessageDetail = SapService.DownLoadFailed;
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                            objSapService.SapFileName = "No File Exits or File Format is not correct";
                            objSapService.insertServiceTraceLog();
                        }
                        else
                        {
                            foreach (FileInfo fi in drFiles)
                            {
                                if (fi.Name.ToLower().Contains("grn") == true)
                                {
                                    UploadFile.RootFolerPath = dir.FullName;
                                    try
                                    {
                                        ValidateExcelFileGRNForGfive(out status, fi.Name);
                                        if (status == 1)
                                        {
                                            fi.Delete();
                                            ftp.DeleteRemoteFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                        else
                                        {
                                            fi.Delete();
                                            ftp.DeleteRemoteFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        SapService obj = new SapService();
                                        obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                                        obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                                        obj.StatusValue = SapService.ExceptionOccured;
                                        obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                                        obj.SapServiceMethodName = SapService.ExceptionOccured;
                                        obj.SapFileName = UploadFile.UploadedFileName;
                                        obj.XMLData = SapService.ExceptionOccured;
                                        obj.insertServiceTraceLog();
                                        return "Exception Occured";
                                    }
                                }
                                if (fi.Name.ToLower().Contains("mod") == true)
                                {
                                    UploadFile.RootFolerPath = dir.FullName;
                                    try
                                    {
                                        ValidateExcelFileMOD(out status, fi.Name, 1);
                                        if (status == 1)
                                        {
                                            fi.Delete();
                                            ftp.DeleteRemoteFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                        else
                                        {
                                            fi.Delete();
                                            ftp.DeleteRemoteFile("/" + PageBase.sFtpServerRemoteDir + "/" + fi.Name);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        SapService obj = new SapService();
                                        obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                                        obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                                        obj.StatusValue = SapService.ExceptionOccured;
                                        obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                                        obj.SapServiceMethodName = SapService.ExceptionOccured;
                                        obj.SapFileName = UploadFile.UploadedFileName;
                                        obj.XMLData = SapService.ExceptionOccured;
                                        obj.insertServiceTraceLog();
                                        return "Exception Occured";
                                    }

                                }
                           }
                        }

                    }
                    return "Successfully";

                }
                else
                {
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = SapService.ConnectionFailed;
                    objSapService.MessageDetail = SapService.ConnectionFailed;
                    objSapService.SapServiceMethodName = SapService.ConnectionFailed;
                    objSapService.SapFileName = SapService.ConnectionFailed;
                    objSapService.XMLData = SapService.ExceptionOccured;
                    objSapService.insertServiceTraceLog();
                    return "Unsuccessfully";

                }
            }

            catch (Exception ex)
            {
                SapService obj = new SapService();
                obj.ModuleName = EnumData.EnumSAPModuleName.ExceptionOccured;
                obj.LogType = (int)EnumData.EnumSAPLogType.Error;
                obj.StatusValue = SapService.ExceptionOccured;
                obj.MessageDetail = ex.Message + "::" + ex.StackTrace;
                obj.SapServiceMethodName = SapService.ExceptionOccured;
                obj.SapFileName = UploadFile.UploadedFileName;
                obj.XMLData = SapService.ExceptionOccured;
                obj.insertServiceTraceLog();
                return "Exception Occured";

            }
            finally
            {
                try
                {
                    DeleteUselessFiles();
                }
                catch (Exception ex)
                {
                }
                ftp.Disconnect();
                UploadFile.ValueForDate = 0;

           }
        }
        private Boolean AuthenticateAccessForGfive()
        {

            success = ftp.UnlockComponent("ZEDAXIFTP_BOo6NxmP8Ine");
            if (success != true)
            {
                objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = SapService.ExceptionOccured + " about trial";
                objSapService.MessageDetail = SapService.ExceptionOccured + " about trial";
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                objSapService.SapFileName = "NA";
                objSapService.XMLData = "30-days Trial has expired";
                objSapService.insertServiceTraceLog();
                return false;
            }
            //hostname = obj.ftpServerLocalIP;
            ftp.Hostname = PageBase.sFtpServerIP;
            ftp.Username = PageBase.sFtpServerUserName;
            ftp.Password = PageBase.sFtpServerPassword;
            ftp.Passive = true;
            success = ftp.Connect();
            if (success != true)
            {
                objSapService.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapService.StatusValue = SapService.ExceptionOccured + " about trial";
                objSapService.MessageDetail = SapService.ConnectionFailed;
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                objSapService.SapFileName = "NA";
                objSapService.XMLData = SapService.ConnectionFailed;
                objSapService.insertServiceTraceLog();
                return false;
            }
            return true;
        }

       
        public void ValidateExcelFileGRNForGfive(out int status, string filename)
        {
            DirectoryInfo drSourceInfo = new DirectoryInfo(HttpContext.Current.Request.MapPath(PageBase.SapDirectoryPath));
            DirectoryInfo drTargetInfoFailure = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Failure");
            DirectoryInfo drTargetInfoSuccess = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Success");
            UploadFile.RootFolerPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
            UploadFile obj=new UploadFile();
            UploadFile.ValueForDate = 1;
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.GRNDataUpload;
            isSuccess = UploadFile.uploadValidExcelForGrnGfive(ref dsSap, "Grn(Gfive)-1");
            UploadFile.ValueForDate = 0;
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data";
                    objSapService.MessageDetail = "No Data";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.insertServiceTraceLog();
                    Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                    break;
                case 2:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = "Data is not in the Correct Format";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();
                    Copy(drSourceInfo, drTargetInfoFailure, filename);//PankajDhingra
                    break;
                case 1:
                    if (InsertDataGRNForGfive(dsSap, filename))
                        blnStatus = true;
                    else
                        blnStatus = false;
                    break;
            }

            hslist.Add(filename, blnStatus);
            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;
            else
                status = 1;

        }
        //private bool InsertDataGRNForGfive(DataSet dsGRNData, string filename)
        //{

        //    DataTable dtGRN = dsGRNData.Tables[0];
        //    DataColumn dcError = new DataColumn();
        //    dcError.DataType = System.Type.GetType("System.String");
        //    dcError.ColumnName = "Error";
        //    if (dtGRN.Columns.Contains("Error") == false)
        //    {
        //        dtGRN.Columns.Add(dcError);

        //    }
        //    for (int i = 0; i <= dtGRN.Rows.Count - 1; i++)
        //    {
        //        if (dtGRN != null && dtGRN.Rows.Count > 0)
        //        {
        //         string strWhere5 = "InvoiceNumber ='" + dtGRN.Rows[i]["InvoiceNumber"].ToString().Trim() +
        //     "'and SalesChannelCode <>'" + dtGRN.Rows[i]["SalesChannelCode"].ToString().Trim() + "'";
        //            DataRow[] dr5 = dtGRN.Select(strWhere5);

        //            if (dr5.Length > 0)
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
        //                {
        //                    dtGRN.Rows[i]["Error"] = "Same invoice number is assigned to different Warehouses";
        //                }
        //                else
        //                    dtGRN.Rows[i]["Error"] += ";Same Invoice Number is assigned to different Warehouses";
        //            }

        //            if (Convert.ToDateTime(dtGRN.Rows[i]["GRNDate"]) < Convert.ToDateTime(dtGRN.Rows[i]["InvoiceDate"]) ||
        //                Convert.ToDateTime(dtGRN.Rows[i]["GRNDate"]) < Convert.ToDateTime(dtGRN.Rows[i]["PODate"]))
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"].ToString() == string.Empty)
        //                {
        //                    dtGRN.Rows[i]["Error"] = "GRN date cant be less than the Po date or Invoice Date";
        //                }
        //                else
        //                    dtGRN.Rows[i]["Error"] += ";GRN date cant be less than the Po date or Invoice Date";

        //            }

        //            if (Convert.ToDateTime(dtGRN.Rows[i]["PODate"]) > Convert.ToDateTime(dtGRN.Rows[i]["InvoiceDate"]))
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
        //                {
        //                    dtGRN.Rows[i]["Error"] = "Invoice date  cant be less than the Po date ";
        //                }
        //                else
        //                    dtGRN.Rows[i]["Error"] += ";Invoice date  cant be less than the Po date ";

        //            }

        //            string strwer = "GRNNumber = '" + dtGRN.Rows[i]["GRNNumber"].ToString().Trim() +
        //                "' and SKUCode = '" + dtGRN.Rows[i]["SKUCode"].ToString().Trim() + "'";
        //            DataRow[] dr2 = dtGRN.Select(strwer);

        //            if (dr2.Length > 1)
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
        //                {
        //                    dtGRN.Rows[i]["Error"] = "Multiple stock entries for same SKU within same GRN Number";
        //                }
        //                else
        //                    dtGRN.Rows[i]["Error"] += ";Multiple stock entries for same SKU within same GRN Number";
        //            }
        //            string strWhere = "SalesChannelCode <>'" + dtGRN.Rows[i]["SalesChannelCode"].ToString().Trim() +
        //                "'and GRNNumber ='" + dtGRN.Rows[i]["GRNNumber"].ToString().Trim() + "'";
        //            DataRow[] dr = dtGRN.Select(strWhere);

        //            if (dr.Length > 0)
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
        //                {
        //                    dtGRN.Rows[i]["Error"] = "Same GRN is assigned to different Warehouses";
        //                }
        //                else
        //                    dtGRN.Rows[i]["Error"] += ";Same GRN is assigned to different Warehouses";
        //            }
        //            DateTime dtGRNDate = Convert.ToDateTime(dtGRN.Rows[i]["GRNDate"]);
        //            TimeSpan ts = dtGRNDate.Subtract(System.DateTime.Now.Date);
        //            if (ts.Days > 0)
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] != DBNull.Value)
        //                    dtGRN.Rows[i]["Error"] += " GRN Date should not be greater than current date!";
        //                else
        //                    dtGRN.Rows[i]["Error"] += ";GRN Date should not be greater than current date!";
        //            }

        //            DateTime dtPODate = Convert.ToDateTime(dtGRN.Rows[i]["PODate"]);
        //            TimeSpan ts1 = dtPODate.Subtract(System.DateTime.Now.Date);
        //            if (ts1.Days > 0)
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] != DBNull.Value || dtGRN.Rows[i]["Error"] != "")
        //                {

        //                    dtGRN.Rows[i]["Error"] += "PO Date should not be greater than current date!";
        //                }
        //                else
        //                {
        //                    dtGRN.Rows[i]["Error"] += ";PO Date should not be greater than current date!";
        //                }
        //            }

        //            DateTime dtInvoiceDate = Convert.ToDateTime(dtGRN.Rows[i]["InvoiceDate"]);
        //            TimeSpan ts2 = dtInvoiceDate.Subtract(System.DateTime.Now.Date);
        //            if (ts2.Days > 0)
        //            {
        //                counter = counter + 1;
        //                if (dtGRN.Rows[i]["Error"] != DBNull.Value)
        //                {

        //                    dtGRN.Rows[i]["Error"] += " Invoice Date should not be greater than current date!";
        //                }
        //                else
        //                {
        //                    dtGRN.Rows[i]["Error"] += ";Invoice Date should not be greater than current date!";
        //                }
        //            }


        //            string strWhere1 = "GRNNumber='" + dtGRN.Rows[i]["GRNNumber"].ToString().Trim() + "'and GRNDate <>'" + dtGRN.Rows[i]["GRNDate"].ToString().Trim() + "'";
        //            if (dtGRN.Rows[i]["GRNNumber"] != DBNull.Value)
        //            {

        //                DataRow[] dr1 = dtGRN.Select(strWhere1);
        //                if (dr.Length > 0)
        //                {
        //                    counter = counter + 1;
        //                    if (dtGRN.Rows[i]["Error"] == DBNull.Value && dtGRN.Rows[i]["Error"] == string.Empty)
        //                    {
        //                        dtGRN.Rows[i]["Error"] = "Same GRN No with multiple dates!";
        //                    }
        //                    else
        //                    {
        //                        dtGRN.Rows[i]["Error"] += ";Same GRN no with multiple dates!";
        //                    }

        //                }

        //            }
        //        }
        //    }
        //    if (counter > 1)
        //    {
        //        DataSet dsSapInfo = new DataSet();
        //        dsSapInfo.Merge(dtGRN);
        //        objSapBTM.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
        //        objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
        //        objSapBTM.StatusValue = "Unable to inserted/Updated.";
        //        objSapBTM.MessageDetail = "Error in the Excel File Data";
        //        objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
        //        objSapBTM.SapFileName = filename;
        //        objSapBTM.XMLData = dsSapInfo.GetXml();
        //        objSapBTM.insertServiceTraceLog();
        //        Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
        //        return false;
        //    }
        //    else
        //    {
        //        objSum = dtGRN.Compute("sum(Quantity)", "");
        //        if (Convert.ToInt32(objSum) <= 0)
        //        {
        //            dsErrorXML = new DataSet();
        //            dsErrorXML.Merge(dtGRN);
        //            objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
        //            objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
        //            objSapService.StatusValue = "Unable to inserted/Updated.";
        //            objSapService.MessageDetail = "Error in the Excel File Data";
        //            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
        //            objSapService.SapFileName = objSapService.SapFileName;
        //            objSapService.XMLData = dsErrorXML.GetXml();
        //            objSapService.insertServiceTraceLog();
        //            Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
        //            return false;
        //        }
        //    }
        //    if (dtGRN.Columns.Contains("Error") == true)
        //        dtGRN.Columns.Remove("Error");
        //    DataSet dsSapInfo1 = new DataSet();
        //    dsSapInfo1.Merge(dtGRN);
        //    objSapBTM.SapFileName = filename;
        //    objSapBTM.XMLData = dsSapInfo1.GetXml();
        //    objSapService.SapFileName = filename;
        //    DataTable Tvp = new DataTable();
        //    using (CommonData ObjCommom = new CommonData())
        //    {
        //        Tvp = ObjCommom.GettvpTableGRNUpload();
        //    }
        //    foreach (DataRow dr in dtGRN.Rows)
        //    {
        //        DataRow drow = Tvp.NewRow();

        //        drow[0] = dr["SalesChannelCode"].ToString();
        //        drow[1] = dr["GRNNumber"].ToString();
        //        drow[2] = dr["GRNDate"];
        //        drow[3] = dr["PONumber"].ToString();
        //        drow[4] = dr["PODate"];
        //        drow[5] = dr["InvoiceNumber"].ToString();
        //        drow[6] = dr["InvoiceDate"];
        //        drow[7] = dr["SKUCode"].ToString();
        //        drow[8] = dr["Quantity"].ToString();
        //        drow[9] = 0;


        //        Tvp.Rows.Add(drow);
        //    }
        //    Tvp.AcceptChanges();
        //    using (SalesData objPrimarySales = new SalesData())
        //    {
        //        objPrimarySales.EntryType = EnumData.eEntryType.eUpload;
        //        int intResult = objPrimarySales.InsertInfoGRNUploadForGfive(Tvp);

        //        if (objPrimarySales.ErrorDetailXML != null && objPrimarySales.ErrorDetailXML != string.Empty)
        //        {
        //            dsErrorXML = new DataSet();
        //            dsErrorXML.Merge(dtGRN);
        //            objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
        //            objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
        //            objSapService.StatusValue = "Unable to inserted/Updated.";
        //            objSapService.MessageDetail = "Error in the Excel File Data";
        //            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
        //            objSapService.SapFileName = objSapService.SapFileName;
        //            objSapService.XMLData = dsErrorXML.GetXml();
        //            objSapService.insertServiceTraceLog();
        //            Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
        //            return false;
        //        }
        //        if (objPrimarySales.Error != null && objPrimarySales.Error != "")
        //        {
        //            dsErrorXML = new DataSet();
        //            dsErrorXML.Merge(dtGRN);
        //            objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
        //            objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
        //            objSapService.StatusValue = "Unable to inserted/Updated.";
        //            objSapService.MessageDetail = "Error in the Excel File Data";
        //            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
        //            objSapService.SapFileName = objSapService.SapFileName;
        //            objSapService.XMLData = dsErrorXML.GetXml();
        //            objSapService.insertServiceTraceLog();
        //            Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
        //            return false;
        //        }
        //        if (intResult == 2)
        //        {
        //            dsErrorXML = new DataSet();
        //            dsErrorXML.Merge(dtGRN);
        //            objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
        //            objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
        //            objSapService.StatusValue = "Unable to inserted/Updated.";
        //            objSapService.MessageDetail = "Error in the Excel File Data";
        //            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
        //            objSapService.SapFileName = objSapService.SapFileName;
        //            objSapService.XMLData = dsErrorXML.GetXml();
        //            objSapService.insertServiceTraceLog();
        //            Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
        //            return false;
        //        }
        //        dsErrorXML = new DataSet();
        //        dsErrorXML.Merge(dtGRN);
        //        objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
        //        objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
        //        objSapService.StatusValue = "Successfully inserted/Updated.";
        //        objSapService.MessageDetail = "Successfully";
        //        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
        //        objSapService.SapFileName = objSapService.SapFileName;
        //        objSapService.XMLData = dsErrorXML.GetXml();
        //        objSapService.insertServiceTraceLog();
        //        Copy(drSourceInfo, drTargetInfoSuccess, filename); //PankajDhingra
        //        return true;
        //    }
        //}
        public void Copy(DirectoryInfo source, DirectoryInfo target, string fileName)
        {
            //check if the target directory exists  
            if (Directory.Exists(target.FullName) == false)
            {
                Directory.CreateDirectory(target.FullName);
            }
            foreach (FileInfo fi in source.GetFiles())
            {
                if (fi.Name == fileName)
                {
                    string strFileName = Path.GetFileNameWithoutExtension(source.ToString()+ "\\"+ fi.Name);
                    fi.MoveTo(target + "\\" + strFileName + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond)+".xlsx");
                }
            }
        }
        private bool InsertDataGRNForGfive(DataSet dsGRNData, string filename)
        {
            DirectoryInfo drSourceInfo = new DirectoryInfo(HttpContext.Current.Request.MapPath(PageBase.SapDirectoryPath));
            DirectoryInfo drTargetInfoFailure = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Failure");
            DirectoryInfo drTargetInfoSuccess = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Success");
            string strDateTimeGrn, strDateTimeInv, strDateTimePO;
            DataTable dtGRN0 = dsGRNData.Tables[0];
            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";
            DataTable dtGRN = new DataTable();
            using (CommonData ObjCommom = new CommonData())
            {
                dtGRN = ObjCommom.GettvpTableGRNUpload();
            }
            foreach (DataColumn dc in dtGRN.Columns)
            {
                if (dc.DataType == typeof(string) && dc.ColumnName == "Quantity")
                {
                    dc.DataType = typeof(System.Int32);
                }
            }
            foreach (DataRow dr in dtGRN0.Rows)
            {
                DataRow drow = dtGRN.NewRow();
                strDateTimeGrn = Convert.ToString(dr["INWARDDATE"].ToString()).Substring(3, 2);
                strDateTimeGrn = strDateTimeGrn + "-" + Convert.ToString(dr["INWARDDATE"].ToString()).Substring(0, 2);
                strDateTimeGrn = strDateTimeGrn + "-" + Convert.ToString(dr["INWARDDATE"].ToString()).Substring(6, 4);

                // Because this is now not invoiceNo column   20-05-2011  By Gfive
                //strDateTimeInv = Convert.ToString(dr["SUPPLIERINVDATE"].ToString()).Substring(3, 2);
                //strDateTimeInv = strDateTimeInv + "-" + Convert.ToString(dr["SUPPLIERINVDATE"].ToString()).Substring(0, 2);
                //strDateTimeInv = strDateTimeInv + "-" + Convert.ToString(dr["SUPPLIERINVDATE"].ToString()).Substring(6, 4);
              
                    strDateTimeInv = Convert.ToString(dr["BEBLDATE"].ToString()).Substring(3, 2);
                    strDateTimeInv = strDateTimeInv + "-" + Convert.ToString(dr["BEBLDATE"].ToString()).Substring(0, 2);
                    strDateTimeInv = strDateTimeInv + "-" + Convert.ToString(dr["BEBLDATE"].ToString()).Substring(6, 4);


                    drow[0] = dr["WHCODE"].ToString();
                    drow[1] = dr["INWARDNO"].ToString();
                    drow[2] = strDateTimeGrn;
                    drow[3] = 0;
                    drow[4] = System.DateTime.Now;
                    //drow[5] = dr["SUPPLIERINV#"].ToString();          Because now this is not invoice No column   20-05-2011
                    drow[5] = dr["BEBLNO"].ToString();
                    drow[6] = strDateTimeInv;
                    drow[7] = dr["SKUCode"].ToString();
                    drow[8] = dr["ACNQTY"].ToString();
                    drow[9] = 0;


                    dtGRN.Rows.Add(drow);
                
   
              
            }
         
            dtGRN.AcceptChanges();

            if (dtGRN.Columns.Contains("Error") == false)
            {
                dtGRN.Columns.Add(dcError);

            }
            counter = 1;
            for (int i = 0; i <= dtGRN.Rows.Count - 1; i++)
            {
                if (dtGRN != null && dtGRN.Rows.Count > 0)
                {
                    string strWhere5 = "InvoiceNumber ='" + dtGRN.Rows[i]["InvoiceNumber"].ToString().Trim() +
                "'and WareHouseCode <>'" + dtGRN.Rows[i]["WareHouseCode"].ToString().Trim() + "'";
                    DataRow[] dr5 = dtGRN.Select(strWhere5);

                    if (dr5.Length > 0)
                    {
                        counter = counter + 1;
                        if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
                        {
                            dtGRN.Rows[i]["Error"] = "Same invoice number is assigned to different Warehouses";
                        }
                        else
                            dtGRN.Rows[i]["Error"] += ";Same Invoice Number is assigned to different Warehouses";
                    }

                    if (Convert.ToDateTime(dtGRN.Rows[i]["GRNDate"]) < Convert.ToDateTime(dtGRN.Rows[i]["InvoiceDate"])) 
                        
                    {
                        counter = counter + 1;
                        if (dtGRN.Rows[i]["Error"].ToString() == string.Empty)
                        {
                            dtGRN.Rows[i]["Error"] = "GRN date cant be less than the Po date or Invoice Date" + System.Environment.NewLine;
                        }
                        else
                            dtGRN.Rows[i]["Error"] += ";GRN date cant be less than the Po date or Invoice Date";

                    }

                    //if (Convert.ToDateTime(dtGRN.Rows[i]["PODate"]) > Convert.ToDateTime(dtGRN.Rows[i]["InvoiceDate"]))
                    //{
                    //    counter = counter + 1;
                    //    if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
                    //    {
                    //        dtGRN.Rows[i]["Error"] = "Invoice date  cant be less than the Po date ";
                    //    }
                    //    else
                    //        dtGRN.Rows[i]["Error"] += ";Invoice date  cant be less than the Po date ";

                    //}

                    //string strwer = "GRNNumber = '" + dtGRN.Rows[i]["GRNNumber"].ToString().Trim() +
                    //    "' and SKUCode = '" + dtGRN.Rows[i]["SKUCode"].ToString().Trim() + "'";
                    //DataRow[] dr2 = dtGRN.Select(strwer);

                    //if (dr2.Length > 1)
                    //{
                    //    counter = counter + 1;
                    //    if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
                    //    {
                    //        dtGRN.Rows[i]["Error"] = "Multiple stock entries for same SKU within same GRN Number";
                    //    }
                    //    else
                    //        dtGRN.Rows[i]["Error"] += ";Multiple stock entries for same SKU within same GRN Number";
                    //}
                    string strWhere = "WareHouseCode <>'" + dtGRN.Rows[i]["WareHouseCode"].ToString().Trim() +
                        "'and GRNNumber ='" + dtGRN.Rows[i]["GRNNumber"].ToString().Trim() + "'";
                    DataRow[] dr = dtGRN.Select(strWhere);

                    if (dr.Length > 0)
                    {
                        counter = counter + 1;
                        if (dtGRN.Rows[i]["Error"] == "" && dtGRN.Rows[i]["Error"] == string.Empty)
                        {
                            dtGRN.Rows[i]["Error"] = "Same GRN is assigned to different Warehouses";
                        }
                        else
                            dtGRN.Rows[i]["Error"] += ";Same GRN is assigned to different Warehouses";
                    }
                    DateTime dtGRNDate = Convert.ToDateTime(dtGRN.Rows[i]["GRNDate"]);
                    TimeSpan ts = dtGRNDate.Subtract(System.DateTime.Now.Date);
                    if (ts.Days > 0)
                    {
                        counter = counter + 1;
                        if (dtGRN.Rows[i]["Error"] != DBNull.Value)
                            dtGRN.Rows[i]["Error"] += " GRN Date should not be greater than current date!";
                        else
                            dtGRN.Rows[i]["Error"] += ";GRN Date should not be greater than current date!";
                    }

                    DateTime dtPODate = Convert.ToDateTime(dtGRN.Rows[i]["PODate"]);
                    TimeSpan ts1 = dtPODate.Subtract(System.DateTime.Now.Date);
                    //if (ts1.Days > 0)
                    //{
                    //    counter = counter + 1;
                    //    if (dtGRN.Rows[i]["Error"] != DBNull.Value || dtGRN.Rows[i]["Error"] != "")
                    //    {

                    //        dtGRN.Rows[i]["Error"] += "PO Date should not be greater than current date!";
                    //    }
                    //    else
                    //    {
                    //        dtGRN.Rows[i]["Error"] += ";PO Date should not be greater than current date!";
                    //    }
                    //}

                    DateTime dtInvoiceDate = Convert.ToDateTime(dtGRN.Rows[i]["InvoiceDate"]);
                    TimeSpan ts2 = dtInvoiceDate.Subtract(System.DateTime.Now.Date);
                    if (ts2.Days > 0)
                    {
                        counter = counter + 1;
                        if (dtGRN.Rows[i]["Error"] != DBNull.Value)
                        {

                            dtGRN.Rows[i]["Error"] += " Invoice Date should not be greater than current date!";
                        }
                        else
                        {
                            dtGRN.Rows[i]["Error"] += ";Invoice Date should not be greater than current date!";
                        }
                    }


                    string strWhere1 = "GRNNumber='" + dtGRN.Rows[i]["GRNNumber"].ToString().Trim() + "'and GRNDate <>'" + dtGRN.Rows[i]["GRNDate"].ToString().Trim() + "'";
                    if (dtGRN.Rows[i]["GRNNumber"] != DBNull.Value)
                    {

                        DataRow[] dr1 = dtGRN.Select(strWhere1);
                        if (dr.Length > 0)
                        {
                            counter = counter + 1;
                            if (dtGRN.Rows[i]["Error"] == DBNull.Value && dtGRN.Rows[i]["Error"] == string.Empty)
                            {
                                dtGRN.Rows[i]["Error"] = "Same GRN No with multiple dates!";
                            }
                            else
                            {
                                dtGRN.Rows[i]["Error"] += ";Same GRN no with multiple dates!";
                            }

                        }

                    }
                }
            }
            if (counter > 1)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtGRN);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated.";
                objSapBTM.MessageDetail = "Error in the Excel File Data";
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                objSapBTM.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                return false;
            }
            else
            {
              
                objSum = dtGRN.Compute("sum(Quantity)", "");
                if (Convert.ToInt32(objSum) <= 0)
                {
                    dsErrorXML = new DataSet();
                    dsErrorXML.Merge(dtGRN);
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Unable to inserted/Updated.";
                    objSapService.MessageDetail = "Error in the Excel File Data having zero Quantity";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsErrorXML.GetXml();
                    objSapService.insertServiceTraceLog();
                    Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                    return false;
                }
            }
            if (dtGRN.Columns.Contains("Error") == true)
                dtGRN.Columns.Remove("Error");
            DataSet dsSapInfo1 = new DataSet();
            dsSapInfo1.Merge(dtGRN);
            objSapBTM.SapFileName = filename;
            objSapBTM.XMLData = dsSapInfo1.GetXml();
            objSapService.SapFileName = filename;
           
            using (SalesData objPrimarySales = new SalesData())
            {
                objPrimarySales.EntryType = EnumData.eEntryType.eUpload;
                int intResult = objPrimarySales.InsertInfoGRNUploadForGfive(dtGRN);

                if (objPrimarySales.ErrorDetailXML != null && objPrimarySales.ErrorDetailXML != string.Empty)
                {
                    dsErrorXML = new DataSet();
                    dsErrorXML.Merge(dtGRN);
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Unable to inserted/Updated.";
                    objSapService.MessageDetail = objPrimarySales.ErrorDetailXML;
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsErrorXML.GetXml();
                    objSapService.insertServiceTraceLog();
                    Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                    return false;
                }
                if (objPrimarySales.Error != null && objPrimarySales.Error != "")
                {
                    dsErrorXML = new DataSet();
                    dsErrorXML.Merge(dtGRN);
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Unable to inserted/Updated.";
                    objSapService.MessageDetail = objPrimarySales.Error +"Error in the Excel File Data";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsErrorXML.GetXml();
                    objSapService.insertServiceTraceLog();
                    Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                    return false;
                }
                if (intResult == 2)
                {
                    dsErrorXML = new DataSet();
                    dsErrorXML.Merge(dtGRN);
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Unable to inserted/Updated.";
                    objSapService.MessageDetail = "Exception has occured during the processing of the data" ;
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                    objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = dsErrorXML.GetXml();
                    objSapService.insertServiceTraceLog();
                    Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                    return false;
                }
                dsErrorXML = new DataSet();
                dsErrorXML.Merge(dtGRN);
                objSapService.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                objSapService.StatusValue = "Successfully inserted/Updated.";
                objSapService.MessageDetail = "Successfully";
                objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                objSapService.SapFileName = filename.Replace(".xlsx", "").Trim() + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                objSapService.XMLData = dsErrorXML.GetXml();
                objSapService.insertServiceTraceLog();
                Copy(drSourceInfo, drTargetInfoSuccess, filename); //PankajDhingra
                return true;
            }
        }
        private void DeleteUselessFiles()
        {
            string strPathUseless = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
            DirectoryInfo dir = new DirectoryInfo(strPathUseless);
            FileInfo[] drFiles = dir.GetFiles("*.xls");
            if (drFiles.Length > 0)
            {
                foreach (FileInfo fi in drFiles)
                {
                    fi.Delete();
                }
            }
            FileInfo[] drFiles1 = dir.GetFiles("*.xlsx");
            if (drFiles.Length > 0)
            {
                foreach (FileInfo fi in drFiles)
                {
                    fi.Delete();
                }
            }
        }
        public void SendMailInfo(string mailTo)
        {
            SapService objSapService = new SapService();
            DataTable dt=objSapService.GetServiceTraceLogForMail();
            if (dt.Rows.Count > 0)
            {
                foreach (DataRow dr in dt.Rows)
                {
                    Mailer.fncSendContentMail(PageBase.EmailIDFrom, "", strMailTo, "", "SapIntegration", dr["MessageDetail"].ToString(), false);
                    objSapService.UpdateServiceTraceLogForMail(dr["SapServiceListDetailID"].ToString());
                }
            }

        }
        #region Onida
        public void FillListofTables(out string result)
        {
            try
            {
                int havingData = 0;
                dsList = new DataSet();
                using (POC objSapSelect = new POC())
                {
                    ServiceDocNoSap = string.Empty;
                    dsList = objSapSelect.GetUpdateSelectRawData(strConnectionString, 0, 2);
                    ServiceDocNoSap = objSapSelect.GenServiceDocNo;
                }
                for (int i = 0; i < dsList.Tables.Count; i++)
                {
                    if (dsList.Tables[i].Rows.Count <= 0)
                    {
                        havingData = havingData + 1;
                    }
                }
                if (havingData != dsList.Tables.Count)
                {
                    if (dsList.Tables[0].Rows.Count > 0)
                    {
                        insertGrnData();
                    }
                    else
                    {
                        objsapServiceOnida = new SapService();
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objsapServiceOnida.StatusValue = "No Data in GRN Table";
                        objsapServiceOnida.StatusValue = "Grn Table has no data";
                        objsapServiceOnida.MessageDetail = "GRN(No Data)";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                        objsapServiceOnida.SapFileName = "GRN";
                        objsapServiceOnida.XMLData = "<Dataset></Dataset>";
                        objsapServiceOnida.insertServiceTraceLog();
                    }
                    if (dsList.Tables[1].Rows.Count > 0)
                    {
                        insertBTMData();
                    }
                    else
                    {
                        objsapServiceOnida = new SapService();
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objsapServiceOnida.StatusValue = "No Data in BTM Table";
                        objsapServiceOnida.StatusValue = "BTM Table has no data";
                        objsapServiceOnida.MessageDetail = "BTM(No Data)";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                        objsapServiceOnida.SapFileName = "BTM";
                        objsapServiceOnida.XMLData = "<Dataset></Dataset>";
                        objsapServiceOnida.insertServiceTraceLog();
                    }
                    if (dsList.Tables[2].Rows.Count > 0)
                    {
                        insertPrimarySalesData();
                    }
                    else
                    {
                        objsapServiceOnida = new SapService();
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                        objsapServiceOnida.StatusValue = "No Data in PrimarySales/Return Table";
                        objsapServiceOnida.StatusValue = "PrimarySales/Return Table has no data";
                        objsapServiceOnida.MessageDetail = "PrimarySales/Return(No Data)";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        objsapServiceOnida.SapFileName = "PrimarySales/Return";
                        objsapServiceOnida.XMLData = "<Dataset></Dataset>";
                        objsapServiceOnida.insertServiceTraceLog();
                    }
                    //if (dsList.Tables[3].Rows.Count > 0)
                    //{
                    //    insertPrimarySalesReturnData();
                    //}
                    //else
                    //{
                    //    objsapServiceOnida = new SapService();
                    //    objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                    //    objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                    //    objsapServiceOnida.StatusValue = "No Data in Primary Sales Return Table";
                    //    objsapServiceOnida.StatusValue = "Primary Sales Return Table has no data";
                    //    objsapServiceOnida.MessageDetail = "Primary Sales Return(No Data)";
                    //    objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                    //    objsapServiceOnida.SapFileName = "Primary Sales Return";
                    //    objsapServiceOnida.XMLData = "<Dataset></Dataset>";
                    //    objsapServiceOnida.ServiceDocNo = ServiceDocNoSap;
                    //    objsapServiceOnida.insertServiceTraceLog();
                    //}


                    result = "Successfully inserted";
                }
                else
                {
                    objsapServiceOnida = new SapService();
                    objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.NoFileToUpload;
                    objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objsapServiceOnida.StatusValue = "Data is not in any table";
                    objsapServiceOnida.StatusValue = "No Data";
                    objsapServiceOnida.MessageDetail = "No Data";
                    objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.Downloading_Uploading.ToString();
                    objsapServiceOnida.SapFileName = "No Data";
                    objsapServiceOnida.XMLData = dsList.GetXml();
                    objsapServiceOnida.insertServiceTraceLog();
                    result = "There were not data to insert";

                }
                

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        public void UpdateStatus(int value, int FromErrorOrNo, String FileName, EnumData.EnumSAPMethodName strMethodName, EnumData.EnumSAPModuleName strModuleName)
        {
            DataSet dsUpdate = new DataSet();
            objsapServiceOnida = new SapService();
            using (POC objSapSelect = new POC())
            {
                dsUpdate = objSapSelect.GetUpdateSelectRawData(strConnectionString, value, FromErrorOrNo);
                if (objSapSelect.Error != String.Empty || objSapSelect.Error != "")
                {
                    objsapServiceOnida.ModuleName = strModuleName;
                    objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objsapServiceOnida.StatusValue = "Data may be inserted successfully,but while status updation error occured";
                    objsapServiceOnida.MessageDetail = objSapSelect.Error;
                    objsapServiceOnida.SapServiceMethodName = strMethodName.ToString();
                    objsapServiceOnida.SapFileName = FileName;
                    objsapServiceOnida.XMLData = "No Error";
                    objsapServiceOnida.insertServiceTraceLog();
                }
            }

        }
        private void insertGrnData()
        {
            try
            {

                using (SalesData objGrn = new SalesData())
                {

                    dsSapInfoOnida = new DataSet();
                    objsapServiceOnida = new SapService();
                    dsSapInfoOnida.Merge(dsList.Tables[0]);
                    objGrn.InsertInfoGRNUploadOnida(dsList.Tables[0]);
                    if (objGrn.ErrorDetailXML == null)
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                        objsapServiceOnida.StatusValue = "Successfully inserted/Updated.";
                        objsapServiceOnida.MessageDetail = "Successfully inserted/Updated.";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[0].TableName;
                        objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(1, 1, "GRN", EnumData.EnumSAPMethodName.GRNData, EnumData.EnumSAPModuleName.GRNDataUpload);
                    }
                    else
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Failure;
                        objsapServiceOnida.StatusValue = "Error in the Data";
                        objsapServiceOnida.MessageDetail = objGrn.ErrorDetailXML + "Data Corrupt";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.GRNData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[0].TableName + " GRN";
                        objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                        objsapServiceOnida.insertServiceTraceLog();
                        UpdateStatus(1, 0, "GRN", EnumData.EnumSAPMethodName.GRNData, EnumData.EnumSAPModuleName.GRNDataUpload);
                    }

                }
            }
            catch (Exception ex)
            {
                objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.GRNDataUpload;
                objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                objsapServiceOnida.StatusValue = "Date is not in correct format";
                objsapServiceOnida.StatusValue = ex.Message;
                objsapServiceOnida.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                objsapServiceOnida.SapFileName = dsList.Tables[0].TableName + "GRN";
                objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                objsapServiceOnida.insertServiceTraceLog();
                objsapServiceOnida = null;
                UpdateStatus(1, 0, "GRN", EnumData.EnumSAPMethodName.GRNData, EnumData.EnumSAPModuleName.GRNDataUpload);

            }

        }
        private void insertBTMData()
        {
            try
            {
                using (WarehouseTranaction objSapInsert = new WarehouseTranaction())
                {
                    dsSapInfoOnida = new DataSet();
                    objsapServiceOnida = new SapService();
                    dsSapInfoOnida.Merge(dsList.Tables[1]);
                    dsSapInfoOnida.Tables[0].TableName = "Table";
                    objSapInsert.BTMSapDetailXML = dsSapInfoOnida.GetXml();
                    objSapInsert.UploadBTMSapDataOnida();
                    if (objSapInsert.BTMSapDetailXML == null)
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                        objsapServiceOnida.StatusValue = "Successfully inserted/Updated.";
                        objsapServiceOnida.MessageDetail = "Successfully inserted/Updated.";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[1].TableName + " BTM";
                        objsapServiceOnida.XMLData = "No Error";
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(2, 1, "BTM", EnumData.EnumSAPMethodName.BTMData, EnumData.EnumSAPModuleName.BTMDataUpload);

                    }
                    else
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Failure;
                        objsapServiceOnida.StatusValue = "Error in the Data";
                        objsapServiceOnida.MessageDetail = objSapInsert.BTMSapDetailXML + " Data Corrupt for BTM";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[1].TableName + " BTM";
                        objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(2, 0, "BTM", EnumData.EnumSAPMethodName.BTMData, EnumData.EnumSAPModuleName.BTMDataUpload);

                    }
                }
            }
            catch (Exception ex)
            {
                objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.BTMDataUpload;
                objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                objsapServiceOnida.StatusValue = "Data is not in correct format";
                objsapServiceOnida.StatusValue = ex.Message;
                objsapServiceOnida.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.BTMData.ToString();
                objsapServiceOnida.SapFileName = dsList.Tables[1].TableName + " BTM";
                objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                objsapServiceOnida.insertServiceTraceLog();
                objsapServiceOnida = null;
                UpdateStatus(2, 0, "BTM", EnumData.EnumSAPMethodName.BTMData, EnumData.EnumSAPModuleName.BTMDataUpload);

            }
        }
        private void insertPrimarySalesData()
        {
            //Mod
            try
            {
                using (SalesData objMODSales = new SalesData())
                {

                    dsSapInfoOnida = new DataSet();
                    objsapServiceOnida = new SapService();
                    dsSapInfoOnida.Merge(dsList.Tables[2]);
                    dsSapInfoOnida.Tables[2].TableName = "PrimarySales";
                    objMODSales.InsertPrimarySalesInfoMODUploadOnida(dsList.Tables[2]);
                    if (objMODSales.ErrorDetailXML == null)
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                        objsapServiceOnida.StatusValue = "Successfully inserted/Updated.";
                        objsapServiceOnida.MessageDetail = "Successfully inserted/Updated.";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[2].TableName;
                        objsapServiceOnida.XMLData = "No Error";
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(3, 1, "PrimarySales/Return", EnumData.EnumSAPMethodName.MODData, EnumData.EnumSAPModuleName.MODDataUpload);

                    }
                    else
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Failure;
                        objsapServiceOnida.StatusValue = "Error in the Data";
                        objsapServiceOnida.MessageDetail = objMODSales.ErrorDetailXML + " Data Corrupt";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[2].TableName;
                        objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(3, 0, "PrimarySales/Return", EnumData.EnumSAPMethodName.MODData, EnumData.EnumSAPModuleName.MODDataUpload);

                    }
                }
            }

            catch (Exception ex)
            {
                objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                objsapServiceOnida.StatusValue = "Data is not in correct format";
                objsapServiceOnida.StatusValue = ex.Message;
                objsapServiceOnida.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                objsapServiceOnida.SapFileName = dsList.Tables[2].TableName + "MOD";
                objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                objsapServiceOnida.insertServiceTraceLog();
                objsapServiceOnida = null;
                UpdateStatus(3, 0, "PrimarySales/Return", EnumData.EnumSAPMethodName.MODData, EnumData.EnumSAPModuleName.MODDataUpload);


            }
        }
        private void insertPrimarySalesReturnData()
        {
            //Mod
            try
            {
                using (SalesData objMODSales = new SalesData())
                {
                    dsList = null;
                    using (POC objSapSelect = new POC())
                    {
                        dsList = objSapSelect.GetUpdateSelectRawData(strConnectionString, 4, 2);
                    }
                    dsSapInfoOnida = new DataSet();
                    objsapServiceOnida = new SapService();
                    dsSapInfoOnida.Merge(dsList.Tables[0]);
                    dsSapInfoOnida.Tables[0].TableName = "PrimarySalesReturn";
                    objMODSales.InsertPrimarySalesInfoMODUploadOnida(dsList.Tables[0]);
                    if (objMODSales.ErrorDetailXML == null)
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                        objsapServiceOnida.StatusValue = "Successfully inserted/Updated.";
                        objsapServiceOnida.MessageDetail = "Successfully inserted/Updated.";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[0].TableName;
                        objsapServiceOnida.XMLData = "No Error";
                        objsapServiceOnida.ServiceDocNumber = ServiceDocNoSap;
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(5, 1, "PrimarySalesReturn", EnumData.EnumSAPMethodName.MODData, EnumData.EnumSAPModuleName.MODDataUpload);

                    }
                    else
                    {
                        objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Failure;
                        objsapServiceOnida.StatusValue = "Error in the Data";
                        objsapServiceOnida.MessageDetail = objMODSales.ErrorDetailXML + " Data Corrupt";
                        objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        objsapServiceOnida.SapFileName = dsList.Tables[0].TableName;
                        objsapServiceOnida.ServiceDocNumber = ServiceDocNoSap;
                        objsapServiceOnida.insertServiceTraceLog();
                        objsapServiceOnida = null;
                        UpdateStatus(5, 0, "PrimarySalesReturn", EnumData.EnumSAPMethodName.MODData, EnumData.EnumSAPModuleName.MODDataUpload);

                    }
                }
            }

            catch (Exception ex)
            {
                objsapServiceOnida.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objsapServiceOnida.LogType = (int)EnumData.EnumSAPLogType.Error;
                objsapServiceOnida.StatusValue = "Data is not in correct format";
                objsapServiceOnida.StatusValue = ex.Message;
                objsapServiceOnida.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                objsapServiceOnida.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                objsapServiceOnida.SapFileName = dsList.Tables[0].TableName + "MOD";
                objsapServiceOnida.XMLData = dsSapInfoOnida.GetXml();
                objsapServiceOnida.ServiceDocNumber = ServiceDocNoSap;
                objsapServiceOnida.insertServiceTraceLog();
                objsapServiceOnida = null;
                UpdateStatus(5, 0, "PrimarySales/Return", EnumData.EnumSAPMethodName.MODData, EnumData.EnumSAPModuleName.MODDataUpload);


            }
        }
        #endregion onida

        public void ValidateExcelFileIMEIBulkUpload(out int status, string filename)
        {
            //  PageBase.strGlobalUploadExcelPathRoot = "/";
            UploadFile.RootFolerPath = HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath);
            UploadFile.UploadedFileName = filename;
            UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eSales;
            UploadFile.UploadCheckNegativeStock = EnumData.EnumSAPModuleName.IMEIDataUpload;
            isSuccess = UploadFile.uploadValidExcelForBTM(ref dsSap, "BulkIMEI");
            switch (isSuccess)
            {
                case 0:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithoutData;
                    objSapService.StatusValue = "No Data or column Name is different than specified.";
                    objSapService.MessageDetail = "No Data";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    objSapService.insertServiceTraceLog();
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName);     //PankajDhingra
                    break;
                case 2:
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = "Error in the Data";
                    objSapService.MessageDetail = "Data is not in the Correct Format";
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                    objSapService.XMLData = dsSap.GetXml();
                    objSapService.insertServiceTraceLog();

                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    break;
                case 1:
                    if (InsertDataIMEIBulkUpload(dsSap, filename))
                        blnStatus = true;
                    else
                        blnStatus = false;
                    break;
            }

            hslist.Add(filename, blnStatus);
            foreach (string strkey in hslist.Keys)
            {
                if (Convert.ToString(hslist[strkey]) == "False")
                    counter = 0;
                else
                    counter = 1;
            }
            if (counter == 0)
                status = 0;
            else
                status = 1;
        }
        public Boolean InsertDataIMEIBulkUpload(DataSet dsIMEIData, string filename)
        {

            DataTable dtIMEIData = dsIMEIData.Tables[0];
            DataTable dtBlankIMEI;
            for (int i = 0; i < dsIMEIData.Tables[0].Columns.Count; i++)
            {
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace(" ", "");
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace("(", "");
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace(")", "");
                dsIMEIData.Tables[0].Columns[i].ColumnName = (dsIMEIData.Tables[0].Columns[i].ColumnName).Replace(".", "");
            }
            using (CommonData ObjCommom = new CommonData())
            {
                dtBlankIMEI = ObjCommom.GettvpTableForIMEI();
            }
            foreach (DataRow dr in dsIMEIData.Tables[0].Rows)
            {
                DataRow drow = dtBlankIMEI.NewRow();
                drow[0] = "0000000";
                drow[1] = dr["SkuCode"].ToString();
                drow[2] = "0000000";
                drow[3] = 0;
                drow[4] = dr["IMEI1"].ToString();
                drow[5] = dr["IMEI2"].ToString();
                drow[6] = "0000000";
                dtBlankIMEI.Rows.Add(drow);
            }
            dtBlankIMEI.AcceptChanges();
            DataSet dsSapInfo = new DataSet();
            dsSapInfo.Merge(dtIMEIData);
            objSapBTM.SapFileName = filename;
            objSapBTM.XMLData = dsSapInfo.GetXml();
            objSapService.SapFileName = filename;
            using (SalesData objIMEI = new SalesData())
            {
                try
                {
                    objIMEI.InsertInfoIMEISapBulkUpload(dtBlankIMEI);
                    if (objIMEI.ErrorDetailXML == null)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                        objSapService.StatusValue = "Successfully inserted/Updated.";
                        objSapService.MessageDetail = "Successfully inserted/Updated.";
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xls";
                        objSapService.XMLData = "No Error";
                        //Copy(drSourceInfo, drTargetInfoSuccess, UploadFile.UploadedFileName); //PankajDhingra
                        return true;

                    }
                    else
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                        objSapService.StatusValue = "Error in the Data";
                        objSapService.MessageDetail = dsSapInfo.GetXml() + " Data Corrupt";
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                        objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                        objSapService.XMLData = objIMEI.ErrorDetailXML;
                        //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                        return false;
                    }
                }
                catch (Exception ex)
                {
                    objSapService.ModuleName = EnumData.EnumSAPModuleName.IMEIDataUpload;
                    objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                    objSapService.StatusValue = ex.Message;
                    objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                    objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.IMEIData.ToString();
                    objSapService.SapFileName = (filename.Replace(".xlsx", "").Trim()).Replace(".xls", "") + Convert.ToString(System.DateTime.Now.Year) + Convert.ToString(System.DateTime.Now.Month) + Convert.ToString(System.DateTime.Now.Day) + "-" + Convert.ToString(System.DateTime.Now.Hour) + Convert.ToString(System.DateTime.Now.Minute) + Convert.ToString(System.DateTime.Now.Second) + Convert.ToString(System.DateTime.Now.Millisecond) + ".xlsx";
                    objSapService.XMLData = strBTMSapDetailXML;
                    //Copy(drSourceInfo, drTargetInfoFailure, UploadFile.UploadedFileName); //PankajDhingra
                    throw ex;
                }
                finally
                {
                    objSapService.insertServiceTraceLog();
                    //if (objSapService != null)
                    //    objSapService = null;
                }
            }
        }

        #region MumbaiPOC
        public Boolean InsertDataMODPOCForScheme(DataSet dsMODData, string filename, int value)
        {
            DirectoryInfo drSourceInfo = new DirectoryInfo(HttpContext.Current.Request.MapPath(PageBase.SapDirectoryPath));
            DirectoryInfo drTargetInfoFailure = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Failure");
            DirectoryInfo drTargetInfoSuccess = new DirectoryInfo(HttpContext.Current.Server.MapPath(PageBase.SapDirectoryPath) + "/Success");
            counter = 1;
            DataSet dsNew = new DataSet();
            DataTable dtFullRecord = new DataTable();
            DataTable dtFilter;
            DataTable dtMODSales = dsMODData.Tables[0];
            DataColumn dcSalesFromID = new DataColumn();
            dcSalesFromID.DataType = System.Type.GetType("System.String");
            dcSalesFromID.ColumnName = "SalesFromID";
            for (int i = 0; i < dsMODData.Tables[0].Columns.Count; i++)
            {
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace(" ", "");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace(".", "");
                //for POC
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("DATE", "BillingDate");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("INVOICENO", "BillingDocumentNumber");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("MATERIALNO", "MaterialCode");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("PLANT", "Plant");
                dsMODData.Tables[0].Columns[i].ColumnName = (dsMODData.Tables[0].Columns[i].ColumnName).Replace("CUSTOMER", "SoldtoParty");


            }
            using (CommonData ObjCommom = new CommonData())
            {
                dtMODSales = ObjCommom.GettvpTablePrimarySalesPOC();
            }

            if (dtMODSales.Columns.Contains("SalesFromID") == false)
                dtMODSales.Columns.Add(dcSalesFromID);

            foreach (DataRow dr in dsMODData.Tables[0].Rows)
            {
                strDateTime = Convert.ToString(dr["BillingDate"].ToString()).Substring(3, 2);
                strDateTime = strDateTime + "-" + Convert.ToString(dr["BillingDate"].ToString()).Substring(0, 2);
                strDateTime = strDateTime + "-" + Convert.ToString(dr["BillingDate"].ToString()).Substring(6, 4);
                DataRow drow = dtMODSales.NewRow();
                drow[0] = dr["SoldtoParty"].ToString();
                drow[1] = dr["BillingDocumentNumber"].ToString();
                drow[2] = Convert.ToDateTime(strDateTime);
                drow[3] = dr["MaterialCode"].ToString();
                drow[4] = dr["Quantity"].ToString();
                drow[5] = dr["Plant"].ToString();
                drow[6] = dr["NET(WITHOUTED)"].ToString();
                drow[7] = dr["TOTALVALUE"].ToString();
                dtMODSales.Rows.Add(drow);
            }
            dtMODSales.AcceptChanges();

            DataColumn dcError = new DataColumn();
            dcError.DataType = System.Type.GetType("System.String");
            dcError.ColumnName = "Error";

            if (dtMODSales.Columns.Contains("Error") == false)
                dtMODSales.Columns.Add(dcError);

            dtFullRecord = dtMODSales.Clone();
            if (dtMODSales.Rows.Count == 0)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtMODSales);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated. due to Zero Quantity";
                objSapBTM.MessageDetail = "Error in the Excel File Data due to Zero Quantity";
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                Copy(drSourceInfo, drTargetInfoFailure, filename);
                return false;
            }


            for (int count = 0; count < 2; count++)
            {
                if (count == 0)
                {
                    dtMODSales.DefaultView.RowFilter = "Quantity>0";
                    dtFilter = dtMODSales.DefaultView.ToTable();
                    //Ds = new DataSet();
                    //Ds.Merge(dtFilter);
                }
                else
                {
                    dtMODSales.DefaultView.RowFilter = "Quantity<0";
                    dtFilter = dtMODSales.DefaultView.ToTable();
                    //Ds = new DataSet();
                    //Ds.Merge(dtFilter);
                }
                if (dtFilter.Rows.Count > 0)
                {
                    for (int i = 0; i <= dtFilter.Rows.Count - 1; i++)
                    {
                        if (dtFilter != null && dtFilter.Rows.Count > 0)
                        {
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value)
                            {
                                //Here i was using dtMODSales instead of dtfilter       
                                string strWhere = "SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different ToPlantCode";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different ToPlantCode";
                                }
                            }
                            if (dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                //Here i was using dtMODSales instead of dtfilter       
                                string strWhere = "SalesFromID<>'" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode";
                                }
                            }
                            //Same Invoice Number has different TD Code
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value || dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                string strWhere = "SalesFromID<>'" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "' and SalesChannelCode<>'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "' and InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'";
                                DataRow[] dr = dtFilter.Select(strWhere);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtMODSales.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] = ";Same Invoice Number has different FromPlantCode To ToPlantCode.<br/>";
                                }


                                TimeSpan ts = Convert.ToDateTime(dtFilter.Rows[i]["invoiceDate"]).Subtract(System.DateTime.Now.Date);
                                if (ts.Days > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] != DBNull.Value)
                                        dtFilter.Rows[i]["Error"] = " Invoice date should not be greater than current date!<br/>";
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Invoice date should not be greater than current date!<br/>";
                                }
                            }
                            //Multiple invoice date with same invoiceNumber
                            string strWhere1 = "InvoiceNumber='" + dtFilter.Rows[i]["InvoiceNumber"].ToString().Trim() + "'and InvoiceDate <>'" + dtFilter.Rows[i]["InvoiceDate"].ToString().Trim() + "'";
                            if (dtFilter.Rows[i]["InvoiceNumber"] != DBNull.Value)
                            {
                                DataRow[] dr = dtFilter.Select(strWhere1);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Same invoice no with multiple dates!<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Same invoice no with multiple dates!<br/>";
                                }
                            }
                            string strWhere2 = "'" + dtFilter.Rows[i]["SalesChannelCode"].ToString().Trim() + "'='" + dtFilter.Rows[i]["SalesFromID"].ToString().Trim() + "'";
                            if (dtFilter.Rows[i]["SalesChannelCode"] != DBNull.Value && dtFilter.Rows[i]["SalesFromID"] != DBNull.Value)
                            {
                                DataRow[] dr = dtFilter.Select(strWhere2);
                                if (dr.Length > 0)
                                {
                                    ErrorCounter = ErrorCounter + 1;
                                    if (dtFilter.Rows[i]["Error"] == DBNull.Value && dtFilter.Rows[i]["Error"] == string.Empty)
                                    {
                                        dtFilter.Rows[i]["Error"] = "Sending Stock to the same plant!<br/>";
                                    }
                                    else
                                        dtFilter.Rows[i]["Error"] += ";Sending Stock to the same plant!<br/>";
                                }
                            }
                        }

                    }
                    foreach (DataRow dr1 in dtFilter.Rows)
                    {
                        dtFullRecord.ImportRow(dr1);
                    }

                }

            }

            if (ErrorCounter > 1)
            {
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtFullRecord);
                objSapBTM.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                objSapBTM.LogType = (int)EnumData.EnumSAPLogType.Error;
                objSapBTM.StatusValue = "Unable to inserted/Updated.";
                objSapBTM.MessageDetail = dsSapInfo.GetXml();
                objSapBTM.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapBTM.insertServiceTraceLog();
                //Copy(drSourceInfo, drTargetInfoFailure, filename);     //PankajDhingra
                return false;
            }
            else
            {
                if (dtFullRecord.Columns.Contains("Error") == true)
                    dtFullRecord.Columns.Remove("Error");
                DataSet dsSapInfo = new DataSet();
                dsSapInfo.Merge(dtFullRecord);
                objSapBTM.SapFileName = filename;
                objSapBTM.XMLData = dsSapInfo.GetXml();
                objSapService.SapFileName = filename;
                using (SalesData objMODSales = new SalesData())
                {
                    try
                    {
                        objMODSales.EntryType = EnumData.eEntryType.eUpload;
                        objMODSales.InsertPrimarySalesInfoMODUpload(dtFullRecord, value);
                        if (objMODSales.ErrorDetailXML == null)
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.SuccessWithData;
                            objSapService.StatusValue = "Successfully inserted/Updated.";
                            objSapService.MessageDetail = "Successfully inserted/Updated.";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                            objSapBTM.SapFileName = filename;
                            objSapService.XMLData = "No Error";
                            objSapService.insertServiceTraceLog();
                            //Copy(drSourceInfo, drTargetInfoSuccess, filename);     //PankajDhingra
                            return true;

                        }
                        else
                        {
                            objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                            objSapService.LogType = (int)EnumData.EnumSAPLogType.Failure;
                            objSapService.StatusValue = "Error in the Data";
                            objSapService.MessageDetail = objMODSales.ErrorDetailXML + " Data Corrupt";
                            objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                            objSapBTM.SapFileName = filename;
                            objSapService.XMLData = dsSapInfo.GetXml();
                            objSapService.insertServiceTraceLog();
                            //Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                            return false;
                        }
                    }
                    catch (Exception ex)
                    {
                        objSapService.ModuleName = EnumData.EnumSAPModuleName.MODDataUpload;
                        objSapService.LogType = (int)EnumData.EnumSAPLogType.Error;
                        if (ex.Message.Contains("startIndex") == true)
                            objSapService.StatusValue = "Date is not in correct format";
                        else
                            objSapService.StatusValue = ex.Message;
                        objSapService.MessageDetail = ex.Source + " :: " + ex.StackTrace;
                        objSapService.SapServiceMethodName = EnumData.EnumSAPMethodName.MODData.ToString();
                        objSapBTM.SapFileName = filename;
                        objSapService.XMLData = strBTMSapDetailXML;
                        objSapService.insertServiceTraceLog();
                        //Copy(drSourceInfo, drTargetInfoFailure, filename); //PankajDhingra
                        throw ex;
                    }
                    finally
                    {
                        //objSapService.insertServiceTraceLog();
                        //if (objSapService != null)
                        //objSapService = null;
                    }
                }

            }


        }
        #endregion 



    }
}

