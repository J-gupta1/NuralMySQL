using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using System.Data;
using Microsoft.ApplicationBlocks.Data;
using System.Data.SqlClient;
using System.Xml;

namespace DataAccess
{
    /// <summary>
    /// Summary description for Task
    /// </summary>

    public class Task : IDisposable
    {
        public DataTable Dt;
        public string ConString = ConfigurationManager.ConnectionStrings["AppConString"].ConnectionString;
        public Int16 OutParam
        {
            get;
            set;
        }
        SqlParameter[] SqlParam;
        public string error { get; set; }
        public int UserID { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public Int32 TotalRecords { get; set; }
        public Int32 CategoryForId { get; set; }
        public Int32 TaskStatusId { get; set; }
        public Int32 TaskPriorityId { get; set; }
        public Int32 PageIndex { get; set; }
        public Int32 PageSize { get; set; }
        public string TaskDescription { get; set; }
        public string Remark { get; set; }
        public Int64 TaskForUserId {get;set;}
        public Int64 TaskUserID {get;set;}
        public Int64 CompanyId {get;set;}
        
        public Task()
        {
            //
            // TODO: Add constructor logic here
            //
        }
         # region dispose
        //Call Dispose to free resources explicitly
        private bool IsDisposed = false;
        public void Dispose()
        {
            //Pass true in dispose method to clean managed resources too and say GC to skip finalize 
            // in next line.
            Dispose(true);
            //If dispose is called already then say GC to skip finalize on this instance.
            GC.SuppressFinalize(this);
        }

        ~Task()
        {
            //Pass false as param because no need to free managed resources when you call finalize it
            //  will be done
            //by GC itself as its work of finalize to manage managed resources.
            Dispose(false);
        }

        //Implement dispose to free resources
        protected virtual void Dispose(bool disposedStatus)
        {
            if (!IsDisposed)
            {
                IsDisposed = true;
                // Released unmanaged Resources
                if (disposedStatus)
                {
                    // Released managed Resources
                }
            }
        }

        #endregion

        public DataTable GetTaskUserList()
        {
            try
            {
                DataTable dsresult = new DataTable();
                SqlParameter[] objSqlParam = new SqlParameter[6];
                objSqlParam[0] = new SqlParameter("@Out_Param", SqlDbType.TinyInt, 2);
                objSqlParam[0].Direction = ParameterDirection.Output;
                objSqlParam[1] = new SqlParameter("@Out_Error", SqlDbType.VarChar, 3000);
                objSqlParam[1].Direction = ParameterDirection.Output;
                objSqlParam[2] = new SqlParameter("@UserID", UserID);
                objSqlParam[3] = new SqlParameter("@TotalRecords", SqlDbType.BigInt, 8);
                objSqlParam[3].Direction = ParameterDirection.Output;
                objSqlParam[4] = new SqlParameter("@AccountIdOut", SqlDbType.Int);
                objSqlParam[4].Direction = ParameterDirection.Output;
                objSqlParam[5] = new SqlParameter("@AuthKey", "");
                dsresult = DataAccess.Instance.GetTableFromDatabase("prcAPIGetTaskUserList", CommandType.StoredProcedure, objSqlParam);
                OutParam = Convert.ToInt16(objSqlParam[0].Value);
                if (objSqlParam[1].Value != null && Convert.ToString(objSqlParam[1].Value).Trim() != "")
                {
                    error = Convert.ToString(objSqlParam[1].Value);
                }
                TotalRecords = Convert.ToInt32(objSqlParam[3].Value);
                return dsresult;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public DataSet GetCategoryList()
        {
            DataSet ds = new DataSet();
            try
            {
                SqlParameter[] SqlParam = new SqlParameter[7];
                SqlParam[0] = new SqlParameter("@UserId", UserID);
                SqlParam[1] = new SqlParameter("@Out_Param", SqlDbType.TinyInt);
                SqlParam[1].Direction = ParameterDirection.Output;
                SqlParam[2] = new SqlParameter("@Out_Error", SqlDbType.NVarChar, 2000);
                SqlParam[2].Direction = ParameterDirection.Output;
                SqlParam[3] = new SqlParameter("@TotalRecord", SqlDbType.BigInt, 8);
                SqlParam[3].Direction = ParameterDirection.Output;
                SqlParam[4] = new SqlParameter("@AccountIdOut", SqlDbType.Int);
                SqlParam[4].Direction = ParameterDirection.Output;
                SqlParam[5] = new SqlParameter("@AuthKey", "");
                SqlParam[6] = new SqlParameter("@CategoryID", CategoryForId);
                ds = DataAccess.Instance.GetDataSetFromDatabase("prcApiCategoryMaster_Select", CommandType.StoredProcedure, SqlParam);
                
                OutParam = Convert.ToInt16(SqlParam[1].Value);
                
                if (SqlParam[0].Value != null)
                {
                    error = Convert.ToString(SqlParam[2].Value);
                }
                TotalRecords = Convert.ToInt32(SqlParam[3].Value);
            }
            catch (Exception ex)
            {
                
                OutParam = 1;
            }
            return ds;

        }
        
        public void InsertTask()
        {
            try
            {
                SqlParameter[] SqlParam = new SqlParameter[14];
                SqlParam[0] = new SqlParameter("@CreatedBy", UserID);
                SqlParam[1] = new SqlParameter("@OutParam", SqlDbType.TinyInt);
                SqlParam[1].Direction = ParameterDirection.Output;
                SqlParam[2] = new SqlParameter("@OutError", SqlDbType.NVarChar, 500);
                SqlParam[2].Direction = ParameterDirection.Output;
                SqlParam[3] = new SqlParameter("@TaskCreationDate", StartDate);
                SqlParam[4] = new SqlParameter("@TaskStartDate", StartDate);
                SqlParam[5] = new SqlParameter("@TaskEndDate", EndDate);
                SqlParam[6] = new SqlParameter("@PriorityType", TaskPriorityId);
                SqlParam[7] = new SqlParameter("@TvpUserList", SqlDbType.Structured);
                SqlParam[7].Value = Dt;
                SqlParam[8] = new SqlParameter("@TaskDescription", TaskDescription);
                SqlParam[9] = new SqlParameter("@Remarks", Remark);
                SqlParam[10] = new SqlParameter("@AccountIdOut", SqlDbType.Int);
                SqlParam[10].Direction = ParameterDirection.Output;
                SqlParam[11] = new SqlParameter("@AuthKey", "");
                SqlParam[12] = new SqlParameter("@TaskStatus", TaskStatusId);

                DataAccess.Instance.DBInsertCommand("prcAPISaveTaskDetail", SqlParam);
                OutParam = Convert.ToInt16(SqlParam[1].Value);
                error = Convert.ToString(SqlParam[2].Value);
                
                
                
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void InsertTaskResponse()
        {
            try
            {
                SqlParameter[] SqlParam = new SqlParameter[10];
                SqlParam[0] = new SqlParameter("@CreatedBy", UserID);
                SqlParam[1] = new SqlParameter("@OutParam", SqlDbType.TinyInt);
                SqlParam[1].Direction = ParameterDirection.Output;
                SqlParam[2] = new SqlParameter("@OutError", SqlDbType.NVarChar, 500);
                SqlParam[2].Direction = ParameterDirection.Output;
                SqlParam[3] = new SqlParameter("@TaskUserId",TaskUserID);
                SqlParam[4] = new SqlParameter("@NextClosureDate", StartDate);
                SqlParam[5] = new SqlParameter("@TaskStatus", TaskStatusId);
                SqlParam[6] = new SqlParameter("@ResponseRemark", Remark);
                SqlParam[7] = new SqlParameter("@TvpImagelist", SqlDbType.Structured);
                SqlParam[7].Value =Dt;
                

                DataAccess.Instance.DBInsertCommand("prcAPISaveTaskResponseDetail", SqlParam);
                OutParam = Convert.ToInt16(SqlParam[1].Value);
                error = Convert.ToString(SqlParam[2].Value);



            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public DataSet getTaskData()
        {
            SqlConnection objCon = new SqlConnection(ConString);
            objCon.Open();
            try
            {
                DataSet dsResult = new DataSet();
                SqlParameter[] SqlParam = new SqlParameter[14];
                SqlParam[0] = new SqlParameter("@UserId", UserID);
                
                SqlParam[1] = new SqlParameter("@TaskDateFrom", StartDate);
                SqlParam[2] = new SqlParameter("@TaskDateTo", EndDate);
                SqlParam[3] = new SqlParameter("@OutParam", SqlDbType.TinyInt);
                SqlParam[3].Direction = ParameterDirection.Output;
                SqlParam[4] = new SqlParameter("@OutError", SqlDbType.NVarChar, 500);
                SqlParam[4].Direction = ParameterDirection.Output;
                SqlParam[5] = new SqlParameter("@PriorityType", TaskPriorityId);
                SqlParam[6] = new SqlParameter("@TaskStatus", TaskStatusId);
                SqlParam[7] = new SqlParameter("@TaskForUserId", TaskForUserId);
                SqlParam[8] = new SqlParameter("@TaskUserID", TaskUserID);
                SqlParam[9] = new SqlParameter("@TotalRecord",SqlDbType.Int);
                SqlParam[9].Direction = ParameterDirection.Output;
                SqlParam[10] = new SqlParameter("@CompanyId", CompanyId);
                SqlParam[11] = new SqlParameter("@PageIndex", PageIndex);
                SqlParam[12] = new SqlParameter("@PageSize", PageSize);

                dsResult = DataAccess.Instance.GetDataSetFromDatabase("prcGetTaskDetail", CommandType.StoredProcedure, SqlParam);
                
                /*SqlCommand objComm = new SqlCommand("prcGetTaskDetail", objCon);
                objComm.CommandType = CommandType.StoredProcedure;
                objComm.Parameters.AddRange(SqlParam);
                objComm.CommandTimeout = 200;
                using (SqlDataAdapter obAdp = new SqlDataAdapter(objComm))
                {
                    obAdp.Fill(dsResult);
                }*/

                
                if (Convert.ToString(SqlParam[4].Value) != null && Convert.ToString(SqlParam[4].Value) != "")
                    error = Convert.ToString(SqlParam[4].Value);
                TotalRecords = Convert.ToInt32(SqlParam[9].Value);
                return dsResult;
            }
            catch (Exception Ex)
            {
                throw Ex;
            }
            finally
            {
                if (objCon.State != ConnectionState.Closed)
                    objCon.Close();
            }
        }
    
    }
}