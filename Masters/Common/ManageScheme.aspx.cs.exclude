using System;
using System.Collections.Generic;
using System.Data;
using BussinessLogic;
using DataAccess;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;


    public partial class Masters_HO_Common_ManageScheme : PageBase 
    {
        string strUploadedFileName;
        UploadFile UploadFile = new UploadFile();

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                tvLevel.Attributes.Add("onclick", "OnCheckBoxCheckChanged(event)");
                tvSalesChannel.Attributes.Add("onclick", "OnCheckBoxCheckChanged(event)");
                uclblMessage.ShowControl = false;
                if (!IsPostBack)
                {
                    BindHierarchyLevelLocationTree();
                    BindSalesChannelLocationTree();
                }

            }
            catch (Exception ex)
            {

                PageBase.Errorhandling(ex);
                uclblMessage.ShowError(Resources.Messages.ErrorMsgTryAfterSometime);
            }
        }
        private void BindHierarchyLevelLocationTree()
        {
            using (BulletinData objBulletinData = new BulletinData())
            {
                DataSet objDs = null;
                objDs = objBulletinData.GetAllHierarchyLevelwithLocation();
                if (objDs != null || objDs.Tables.Count > 0)
                {
                    if (objDs != null || objDs.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < objDs.Tables[0].Rows.Count; i++)
                        {
                            TreeNode parentnode = new TreeNode();
                            parentnode.Text = objDs.Tables[0].Rows[i][1].ToString();
                            parentnode.Value = objDs.Tables[0].Rows[i][0].ToString();
                            tvLevel.Nodes.Add(parentnode);
                            for (int j = 0; j < objDs.Tables[1].Rows.Count; j++)
                            {
                                if (objDs.Tables[0].Rows[i][0].ToString() == objDs.Tables[1].Rows[j][0].ToString())
                                {
                                    TreeNode childnode = new TreeNode();
                                    childnode.Text = objDs.Tables[1].Rows[j][2].ToString();
                                    childnode.Value = objDs.Tables[1].Rows[j][1].ToString();
                                    parentnode.ChildNodes.Add(childnode);
                                }
                            }
                        }
                    }
                }
            }
        }
        private void BindSalesChannelLocationTree()
        {
            using (BulletinData objBulletinData = new BulletinData())
            {
                DataSet objDs = null;
                objDs = objBulletinData.GetAllSalesChannelwithLocation();
                if (objDs != null || objDs.Tables.Count > 0)
                {
                    if (objDs != null || objDs.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < objDs.Tables[0].Rows.Count; i++)
                        {
                            TreeNode parentnode = new TreeNode();
                            parentnode.Text = objDs.Tables[0].Rows[i][1].ToString();
                            parentnode.Value = objDs.Tables[0].Rows[i][0].ToString();
                            tvSalesChannel.Nodes.Add(parentnode);
                            for (int j = 0; j < objDs.Tables[1].Rows.Count; j++)
                            {
                                if (objDs.Tables[0].Rows[i][0].ToString() == objDs.Tables[1].Rows[j][0].ToString())
                                {
                                    TreeNode childnode = new TreeNode();
                                    childnode.Text = objDs.Tables[1].Rows[j][1].ToString();
                                    childnode.Value = objDs.Tables[1].Rows[j][2].ToString();
                                    parentnode.ChildNodes.Add(childnode);
                                }

                            }
                        }
                    }
                }

            }
        }
     #region User Defined
   private void InsertData(DataSet objDS)
        {
            pnlgrid.Visible = true;
            btnSave.Visible = true;
            //objDS.Tables[0].Columns.Remove("Error");
            GrdScheme.DataSource = objDS.Tables[0];
            ViewState["Scheme"] = objDS.Tables[0];
            GrdScheme.DataBind();
            updscheme.Update();
        }
     void resetControls()
        {
            cmbSchemeBasedOn.SelectedValue = "0";
            cmbSchemeBasedType.SelectedValue = "0";
            cmbSchemeLevel.SelectedValue = "0";
            //cmbSchemePeriod.SelectedValue = "0";
            txtScheme.Text = "";
            
            pnlgrid.Visible = false;
           ViewState["Scheme"] = null;
           updscheme.Update();
           updForm.Update();
        }

bool pagevalidation()
{
    if (cmbSchemeBasedOn.SelectedIndex == 0 || cmbSchemeBasedType.SelectedIndex == 0 || cmbSchemeLevel.SelectedIndex == 0 )
    {
        uclblMessage.ShowWarning(GetLocalResourceObject("MessageRequiredField").ToString());
        return false;
    }
    if (ServerValidation.IsDate(ucStartDate.Date, true) != 0 || ServerValidation.IsDate(ucEndDate.Date, true)!=0)
    {
        uclblMessage.ShowWarning(Resources.Messages.InvalidDate);
        return false;
    }

    if (txtScheme.Text.Trim() == string.Empty || txtScheme.Text.Trim() == "")
    {
        uclblMessage.ShowWarning(Resources .Messages.MandatoryField );
        return false;
    }

    if (Convert.ToDateTime(ucStartDate.Date) >= Convert.ToDateTime(ucEndDate.Date))
    {
        uclblMessage.ShowWarning(Resources.Messages.InvalidDate  );
        return false;
    }

    if (Convert.ToDateTime(ucEndDate.Date) <= DateTime.Now.Date)
    {
        uclblMessage.ShowWarning(Resources .Messages.InvalidDate );
        return false;
    }

    //if (cmbSchemePeriod.SelectedIndex == 1)
    //{
    //    DateTime dtestart = Convert.ToDateTime(ucStartDate.Date);
    //    DateTime dteEnd = dtestart.AddMonths(1).AddDays(-1);
    //    DateTime dteNewstart = new DateTime(dtestart.Year, dtestart.Month, dtestart.Day);

    //    if (dtestart.Date != dteNewstart.Date || dteEnd != Convert.ToDateTime(ucEndDate.Date).Date)
    //    {
    //        uclblMessage.ShowWarning(GetLocalResourceObject("MessageMOnthRangeForDate").ToString());
    //        return false;
    //    }


    //}
    //else if (cmbSchemePeriod.SelectedIndex == 2)
    //{
    //    DateTime dtestart = Convert.ToDateTime(ucStartDate.Date);
    //    DateTime dteEnd = dtestart.AddMonths(3).AddDays(-1);
    //    DateTime dteNewstart = new DateTime(dtestart.Year, dtestart.Month, dtestart.Day);

    //    if (dtestart.Date != dteNewstart.Date || dteEnd != Convert.ToDateTime(ucEndDate.Date).Date)
    //    {
    //        uclblMessage.ShowWarning(GetLocalResourceObject("MessageQuarterRangeCheck").ToString());
    //        return false;
    //    }


    //}
    if (rblAccessType.SelectedValue == "2")
    {
        int i = 0;
        i = tvLevel.CheckedNodes.Count + tvSalesChannel.CheckedNodes.Count;
        if (i <= 0)
        {
          uclblMessage.ShowWarning( "Please choose at least one node for specific Access Type");
            return false;
        }
    }
        return true;
}


	#endregion

     #region Button Event
	    protected void BtnUpload_Click(object sender, EventArgs e)
        {
            if (pagevalidation() == false)
            {
                return;
            }
            pnlgrid.Visible = false;
            DataSet objDS = new DataSet();
            try
            {
                Int16 Upload = 0;
                byte isSuccess = 1;
                String RootPath = Server.MapPath("../../");
                UploadFile.RootFolerPath = RootPath;

                Upload = UploadFile.IsExcelFile(flupdScheme, ref strUploadedFileName);
                if (Upload == 1)
                {
                    UploadFile.UploadedFileName = strUploadedFileName;
                    UploadFile.UploadValidationType = EnumData.eUploadExcelValidationType.eScheme;

                    if (cmbSchemeLevel.SelectedIndex == 1)
                    {
                        UploadFile.TemplateType = EnumData.eTargetTemplateType .eSummary;
                    }
                    else if (cmbSchemeLevel.SelectedIndex == 2)
                    {
                        UploadFile.TemplateType = EnumData.eTargetTemplateType.eSKUWise;
                    }

                    if (cmbSchemeLevel.SelectedValue == "2")
                    {
                        isSuccess = UploadFile.uploadValidExcel(ref objDS, "SchemeSKUWise");
                    }
                    else
                    {
                        isSuccess = UploadFile.uploadValidExcel(ref objDS, "SchemeBrandWise");
                    }
                        switch (isSuccess)
                    {
                        case 0:
                            uclblMessage.ShowError(UploadFile.Message);
                            break;
                        case 2:
                            uclblMessage.ShowError(Resources.Messages.CheckErrorGrid);
                            pnlgrid.Visible = true;
                            GrdScheme.DataSource = objDS;
                            GrdScheme.DataBind();
                            updscheme.Update();
                            btnSave.Visible = false;
                            break;
                        case 1:
                            InsertData(objDS);

                            break;
                    }

                }
                else if (Upload == 2)
                {
                    uclblMessage.ShowError(Resources.Messages.UploadXlxs);
                }
                else if (Upload == 3)
                {
                    uclblMessage.ShowError(Resources.Messages.SelectFile);
                }
                else
                {
                    uclblMessage.ShowError(Resources.Messages.ErrorMsgTryAfterSometime);
                }
            }
            catch (Exception ex)
            {
                uclblMessage.ShowError(Resources.Messages.ErrorMsgTryAfterSometime);
                PageBase.Errorhandling(ex);
            }
        }

        protected void  btnSave_Click(object sender, EventArgs e)
            {
              if (IsPageRefereshed == true)          
            {
                return;
            }
                if (pagevalidation() == false)
                {
                    return;
                }
           
           
                DataSet DsXML = new DataSet();
            try
            {
                if (ViewState["Scheme"] != null)
                {
                    DataTable DtDetail = new DataTable();
                    DataTable dtScheme = new DataTable();
                    using (CommonData ObjCommom = new CommonData())
                    {
                        dtScheme = ObjCommom.GettvpTableUploadScheme ();
                    }
                    DtDetail = (DataTable)ViewState["Scheme"];
                    foreach (DataRow dr in DtDetail.Rows)
                    {
                        DataRow drow = dtScheme.NewRow();
                       
                        if (cmbSchemeLevel .SelectedIndex == 1)
                            drow[0] = dr["BrandCode"].ToString();
                        else
                            drow[0] = dr["SKUCode"].ToString();
                        drow[1] = dr["MinSlab"];
                        drow[2] = dr["MaxSlab"].ToString();
                        drow[3] = dr["RewardedQuantity"];
                        dtScheme.Rows.Add(drow);
                    }
                    dtScheme.AcceptChanges();
                using (SchemeData objScheme = new SchemeData())
                {
                      if (cmbSchemeBasedType.SelectedValue == "1" && cmbSchemeBasedOn.SelectedIndex==1)
                             {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eTargetPurchaseQty;
                            }
                            else if (cmbSchemeBasedType.SelectedValue == "1" && cmbSchemeBasedOn.SelectedIndex == 2)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eTargetPurchaseValue;
                            }
                            else if (cmbSchemeBasedType.SelectedValue == "2" && cmbSchemeBasedOn.SelectedIndex == 1 && cmbSchemeLevel.SelectedIndex==1)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eTotalPurchaseQty;
                            }
                            else if (cmbSchemeBasedType.SelectedValue == "2" && cmbSchemeBasedOn.SelectedIndex == 2 && cmbSchemeLevel.SelectedIndex == 1)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eTotalPurchaseValue;
                            }
                            else if (cmbSchemeBasedType.SelectedValue == "2" && cmbSchemeBasedOn.SelectedIndex == 1 && cmbSchemeLevel.SelectedIndex==2)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eSKUWisePurchaseQty;
                            }
                            else if (cmbSchemeBasedType.SelectedValue == "2" && cmbSchemeBasedOn.SelectedIndex == 2 && cmbSchemeLevel.SelectedIndex == 2)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eSKUWisePurchaseValue;
                            }

                            else if (cmbSchemeBasedType.SelectedValue == "3" && cmbSchemeBasedOn.SelectedIndex == 1 && cmbSchemeLevel.SelectedIndex == 1)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eTotalSalesQty;
                            }

                            else if (cmbSchemeBasedType.SelectedValue == "3" && cmbSchemeBasedOn.SelectedIndex == 2 && cmbSchemeLevel.SelectedIndex == 1)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eTotalSalesValue;
                            }

                            else if (cmbSchemeBasedType.SelectedValue == "3" && cmbSchemeBasedOn.SelectedIndex == 1 && cmbSchemeLevel.SelectedIndex == 2)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eSKUWiseSalesQty;
                            }

                            else if (cmbSchemeBasedType.SelectedValue == "3" && cmbSchemeBasedOn.SelectedIndex == 2 && cmbSchemeLevel.SelectedIndex == 2)
                            {
                                objScheme.ComponentType = EnumData.SchemeComponentType.eSKUWiseSalesValue;
                            }
                           

                            objScheme.SchemeLevel = Convert .ToInt16 ( cmbSchemeLevel.SelectedValue);
                            objScheme.SchemeName = txtScheme.Text.Trim();
                            objScheme.FromDate = ucStartDate.Date;
                            objScheme.ToDate = ucEndDate.Date;
                            //objScheme.SchemePeriod = Convert.ToInt16(cmbSchemePeriod.SelectedItem.Value);
                            string LevelIds = FindTreeRoots(tvLevel);
                            string LocationIds = FindTreeChild(tvLevel);
                            if (LevelIds.Length > 0 || LevelIds != null)
                                objScheme.LevelIds = LevelIds;
                            if (LocationIds.Length > 0 || LocationIds != null)
                                objScheme.LocationIds = LocationIds;
                            string SalesChannelTypeIds = FindTreeRoots(tvSalesChannel);
                            string SalesChannelIds = FindTreeChild(tvSalesChannel);
                            if (SalesChannelIds.Length > 0 || SalesChannelIds != null)
                                objScheme.SalesChannelIds = SalesChannelIds;
                            if (SalesChannelTypeIds.Length > 0 || SalesChannelTypeIds != null)
                                objScheme.SalesChannelTypeIds = SalesChannelTypeIds;
                            objScheme.InsertUpdateScheme(dtScheme );
                            if (objScheme.ErrorMessage != string.Empty)
                            {
                                uclblMessage.ShowError(objScheme.ErrorMessage);
                                return;
                            }
                            else if (objScheme.ErrorXML != string.Empty && objScheme.ErrorXML != null)
                            {
                                uclblMessage.XmlErrorSource = objScheme.ErrorXML;
                                return;
                            }
                            pnlgrid.Visible = false;
                            ViewState["Scheme"] = null;
                            uclblMessage.ShowSuccess(Resources.Messages.CreateSuccessfull);
                            updscheme.Update();
                            updForm.Update();
                        
                       
                    };
                }
                

            }
            catch (Exception ex)
            {
                PageBase.Errorhandling(ex);
                uclblMessage.ShowError(Resources.Messages.ErrorMsgTryAfterSometime);
            }
            finally {
                if (DsXML != null)
                {
                    DsXML.Dispose();
                }
            }
        }
                           
        protected void btnReset_Click(object sender, EventArgs e)
        {
            resetControls();
        }
        protected void lnkDownload_Click(object sender, EventArgs e)
        {
            try
            {
                DataSet DsSku = new DataSet();

                using (SchemeData ObjScheme = new SchemeData())
                {

                    ObjScheme.SchemeType  = EnumData.eSchemeTemplateType .eSKUWise ;


                    DsSku.Merge(ObjScheme.GetSchemeTemplate());
                };
                if (DsSku.Tables[0].Rows.Count > 0)
                {
                    String FilePath = Server.MapPath("../../");
                    string FilenameToexport = "SKU Wise Scheme Template";
                    PageBase.RootFilePath = FilePath;
                    PageBase.ExportToExecl(DsSku, FilenameToexport, EnumData.eTemplateCount.eTarget);
                }
            }
            catch (Exception ex)
            {

                PageBase.Errorhandling(ex);
                uclblMessage.ShowError(ex.ToString(), GlobalErrorDisplay());

            }
            
        }

	#endregion

        #region Combo Events

        
        #endregion     
      
        protected void LnkDownloadRefCode_Click(object sender, EventArgs e)
        {

            DataSet DsSku = new DataSet();
            try
            {
                using (SalesChannelData ObjSales = new SalesChannelData())
                {
                    ObjSales.ReqType = EnumData.eControlRequestTypeForEntry.eScheme ;

                    DsSku = ObjSales.GetAllTemplateData();
                };
                if (DsSku.Tables.Count > 0)
                {
                    String FilePath = Server.MapPath("../../");
                    string FilenameToexport = "Reference Code list";
                    PageBase.RootFilePath = FilePath;
                    PageBase.ExportToExecl(DsSku, FilenameToexport, EnumData.eTemplateCount.eScheme);
                }
            }
            catch (Exception ex)
            {

                PageBase.Errorhandling(ex);
                uclblMessage.ShowError(ex.ToString(), GlobalErrorDisplay());

            }
        }
        protected void lnksummeryDwnload_Click(object sender, EventArgs e)
        {
            try
            {
                DataSet DsSku = new DataSet();

                using (SchemeData ObjScheme = new SchemeData())
                {

                    ObjScheme.SchemeType = EnumData.eSchemeTemplateType.eSummary;


                    DsSku.Merge(ObjScheme.GetSchemeTemplate());
                };
                if (DsSku.Tables[0].Rows.Count > 0)
                {
                    String FilePath = Server.MapPath("../../");
                    string FilenameToexport = "Consolidated Scheme Template";
                    PageBase.RootFilePath = FilePath;
                    PageBase.ExportToExecl(DsSku, FilenameToexport, EnumData.eTemplateCount.eTarget);
                }
            }
            catch (Exception ex)
            {

                PageBase.Errorhandling(ex);
                uclblMessage.ShowError(ex.ToString(), GlobalErrorDisplay());

            }
        }
        #region Tree Control Events
        private string FindTreeRoots(TreeView treeView)
        {
            string Levels = "";
            if (treeView.CheckedNodes.Count > 0)
            {
                foreach (TreeNode root in treeView.Nodes)
                {
                    if (root.Checked == true)
                        Levels += "," + root.Value.ToString();
                }
            }
            return Levels;
        }

        private string FindTreeChild(TreeView treeView)
        {
            string Locations = "";
            foreach (TreeNode root in treeView.Nodes)
            {
                if (root.Checked == false)
                {
                    foreach (TreeNode child in root.ChildNodes)
                    {
                        if (child.Checked == true)
                            Locations += "," + child.Value.ToString();

                    }
                }
            }

            return Locations;
        
        }
        void UnCheckTreeNode(TreeView treeView)
        {
            foreach (TreeNode root in treeView.Nodes)
            {
                root.Checked = false;
                foreach (TreeNode child in root.ChildNodes)
                {
                    child.Checked = false;
                }
            }

        }

        private void FillTreeNode(TreeView treeView, int Id)
        {
            DataSet Ds = null;
            using (BulletinData ObjData = new BulletinData())
            {
                ObjData.BulletinId = Id;
                if (treeView == tvLevel)
                {
                    Ds = ObjData.GetHierarchyLevelTreeByBulletinId();
                    if (Ds != null || Ds.Tables.Count > 0)
                    {
                        if (Ds.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < Ds.Tables[0].Rows.Count; i++)
                            {
                                foreach (TreeNode root in treeView.Nodes)
                                {
                                    if (root.Value == Ds.Tables[0].Rows[i]["HierarchyLevelID"].ToString())
                                        root.Checked = true;
                                    if (root.Checked == true)
                                    {
                                        foreach (TreeNode child in root.ChildNodes)
                                        {
                                            child.Checked = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (Ds.Tables[1].Rows.Count > 0)
                        {
                            for (int i = 0; i < Ds.Tables[1].Rows.Count; i++)
                            {
                                foreach (TreeNode root in treeView.Nodes)
                                {
                                    if (root.Checked == false)
                                    {
                                        foreach (TreeNode child in root.ChildNodes)
                                        {
                                            if (child.Value == Ds.Tables[1].Rows[i]["LocationID"].ToString())
                                                child.Checked = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (treeView == tvSalesChannel)
                {

                    Ds = ObjData.GetSalesChannelTreeByBulletinId();
                    if (Ds != null || Ds.Tables.Count > 0)
                    {
                        if (Ds.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < Ds.Tables[0].Rows.Count; i++)
                            {
                                foreach (TreeNode root in treeView.Nodes)
                                {
                                    if (root.Value == Ds.Tables[0].Rows[i]["LevelID"].ToString())
                                        root.Checked = true;
                                    if (root.Checked == true)
                                    {
                                        foreach (TreeNode child in root.ChildNodes)
                                        {
                                            child.Checked = true;
                                        }
                                    }
                                }
                            }
                        }
                        if (Ds.Tables[1].Rows.Count > 0)
                        {
                            for (int i = 0; i < Ds.Tables[1].Rows.Count; i++)
                            {
                                foreach (TreeNode root in treeView.Nodes)
                                {
                                    if (root.Checked == false)
                                    {
                                        foreach (TreeNode child in root.ChildNodes)
                                        {
                                            if (child.Value == Ds.Tables[1].Rows[i]["SalesChannelID"].ToString())
                                                child.Checked = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        #endregion
        protected void rblAccessType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (rblAccessType.SelectedValue == "1")
            {
                tblSpecific.Visible = false;
            }
            if (rblAccessType.SelectedValue == "2")
            {
                tblSpecific.Visible = true;
            }
        }



        protected void LBViewScheme_Click(object sender, EventArgs e)
        {
            Response.Redirect("SchemeView.aspx",false);
        }
}

